

services:
  # База данных PostgreSQL
  db:
    image: postgres:15-alpine
    container_name: deadline_task_board_db
    environment:
      POSTGRES_DB: deadline_task_board
      POSTGRES_USER: dbuser
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-securepassword123}
      POSTGRES_HOST_AUTH_METHOD: md5
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dbuser -d deadline_task_board"]
      interval: 5s
      timeout: 5s
      retries: 10

  # Backend API
  api:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: deadline_task_board_api
    environment:
      DATABASE_URL: postgresql://dbuser:${POSTGRES_PASSWORD:-securepassword123}@db:5432/deadline_task_board
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-here-change-in-production}
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      HOST: 0.0.0.0
      PORT: 8000
      DEBUG: "False"
      ALLOWED_ORIGINS: '["http://localhost:3000", "http://127.0.0.1:3000", "http://frontend:3000"]'
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app_network
    volumes:
      - ./backend/app:/app/app
      - ./backend/scripts:/app/scripts
    command: >
      sh -c "
        while ! pg_isready -U dbuser -h db -d deadline_task_board; do
          echo 'Waiting for database...'
          sleep 2
        done &&
        python scripts/init_db.py &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000
      "

  # Frontend React App
  frontend:
    build:
      context: ./web-app
      dockerfile: Dockerfile
    container_name: deadline_task_board_frontend
    environment:
      REACT_APP_API_URL: /api/v1
    ports:
      - "3000:3000"
    depends_on:
      - api
    networks:
      - app_network
    volumes:
      - ./web-app/src:/app/src
      - ./web-app/public:/app/public
    stdin_open: true
    tty: true

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: deadline_task_board_nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api
      - frontend
    networks:
      - app_network

volumes:
  postgres_data:

networks:
  app_network:
    driver: bridge 