version: '3.8'

services:
  # База данных PostgreSQL
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: deadline_task_board
      POSTGRES_USER: dbuser
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dbuser -d deadline_task_board"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  api:
    build: ./backend
    environment:
      DATABASE_URL: postgresql://dbuser:${POSTGRES_PASSWORD}@db:5432/deadline_task_board
      SECRET_KEY: ${SECRET_KEY}
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      HOST: 0.0.0.0
      PORT: 8000
      DEBUG: False
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    command: >
      sh -c "
        while ! pg_isready -U dbuser -h db -d deadline_task_board; do
          echo 'Waiting for database...'
          sleep 2
        done &&
        python scripts/init_db.py &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000
      "

  # Frontend React App
  frontend:
    build: ./web-app
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL:-https://${RAILWAY_STATIC_URL}/api/v1}
      NODE_ENV: production
    ports:
      - "3000:3000"
    depends_on:
      - api
    command: npm start

  # Telegram Bot
  bot:
    build: ./backend
    environment:
      DATABASE_URL: postgresql://dbuser:${POSTGRES_PASSWORD}@db:5432/deadline_task_board
      SECRET_KEY: ${SECRET_KEY}
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      DEBUG: False
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
    depends_on:
      - db
      - api
    command: python run_bot.py

volumes:
  postgres_data: 