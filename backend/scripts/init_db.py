#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –≤ sys.path
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from sqlalchemy import text
from app.database import engine, SessionLocal
from app.models.base import Base
from app.models.user import User
from app.models.board import Board
from app.models.column import Column
from app.models.task import Task
from app.models.order import Order
from app.models.proposal import Proposal
from app.models.message import Message
from app.models.task_status import TaskStatus
from app.models.task_type import TaskType


def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ SQLAlchemy
        print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü —á–µ—Ä–µ–∑ SQLAlchemy...")
        Base.metadata.create_all(bind=engine)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞–ª–∏—Å—å –ª–∏ —Ç–∞–±–ª–∏—Ü—ã
        with engine.connect() as conn:
            result = conn.execute(text("SELECT table_name FROM information_schema.tables WHERE table_schema = 'public'"))
            tables = result.fetchall()
            table_names = [table[0] for table in tables]
            
        if len(table_names) >= 9:  # –û–∂–∏–¥–∞–µ–º –º–∏–Ω–∏–º—É–º 9 —Ç–∞–±–ª–∏—Ü
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ SQLAlchemy")
            print(f"–°–æ–∑–¥–∞–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(table_names)}")
            return
        else:
            print(f"‚ö†Ô∏è –°–æ–∑–¥–∞–Ω–æ —Ç–æ–ª—å–∫–æ {len(table_names)} —Ç–∞–±–ª–∏—Ü, –æ–∂–∏–¥–∞–ª–æ—Å—å –±–æ–ª—å—à–µ")
            print("üîÑ –ü—Ä–æ–±—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ SQL —Ñ–∞–π–ª...")
            
            # –ï—Å–ª–∏ SQLAlchemy –Ω–µ —Å–æ–∑–¥–∞–ª –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º SQL —Ñ–∞–π–ª
            init_db_with_sql()
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ SQLAlchemy: {e}")
        print("üîÑ –ü—Ä–æ–±—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ SQL —Ñ–∞–π–ª...")
        init_db_with_sql()


def init_db_with_sql():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º SQL —Ñ–∞–π–ª–∞"""
    try:
        # –ß–∏—Ç–∞–µ–º SQL —Ñ–∞–π–ª
        sql_file_path = os.path.join(os.path.dirname(__file__), '..', 'init_db.sql')
        
        if not os.path.exists(sql_file_path):
            print(f"‚ùå SQL —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {sql_file_path}")
            return
            
        with open(sql_file_path, 'r', encoding='utf-8') as f:
            sql_content = f.read()
        
        print("üìÑ SQL —Ñ–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º SQL –∫–æ–º–∞–Ω–¥—ã
        with engine.connect() as conn:
            try:
                conn.execute(text(sql_content))
                conn.commit()
                print("‚úÖ SQL —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ SQL: {e}")
                # –ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ —á–∞—Å—Ç—è–º
                print("üîÑ –ü—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ —á–∞—Å—Ç—è–º...")
                
                # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –±–ª–æ–∫–∏ DO $$ ... END $$
                import re
                do_blocks = re.findall(r'DO \$\$.*?END \$\$;', sql_content, re.DOTALL)
                
                # –£–¥–∞–ª—è–µ–º DO –±–ª–æ–∫–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ SQL
                sql_without_do = re.sub(r'DO \$\$.*?END \$\$;', '', sql_content, flags=re.DOTALL)
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º DO –±–ª–æ–∫–∏
                for i, block in enumerate(do_blocks):
                    try:
                        conn.execute(text(block))
                        print(f"‚úÖ DO –±–ª–æ–∫ {i+1} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                    except Exception as e:
                        print(f"‚ö†Ô∏è DO –±–ª–æ–∫ {i+1} –ø—Ä–æ–ø—É—â–µ–Ω: {e}")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å—Ç–∞–ª—å–Ω–æ–π SQL
                if sql_without_do.strip():
                    try:
                        conn.execute(text(sql_without_do))
                        print("‚úÖ –û—Å—Ç–∞–ª—å–Ω–æ–π SQL –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –æ—Å—Ç–∞–ª—å–Ω–æ–º SQL: {e}")
                
                conn.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        with engine.connect() as conn:
            result = conn.execute(text("SELECT table_name FROM information_schema.tables WHERE table_schema = 'public'"))
            tables = result.fetchall()
            table_names = [table[0] for table in tables]
            
        print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –°–æ–∑–¥–∞–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(table_names)}")
        print(f"–¢–∞–±–ª–∏—Ü—ã: {table_names}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")


if __name__ == "__main__":
    init_db()
