from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

def get_phone_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    return keyboard

def get_role_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏"""
    builder = InlineKeyboardBuilder()
    builder.button(text="üë®‚Äçüíº –ó–∞–∫–∞–∑—á–∏–∫", callback_data="role_customer")
    builder.button(text="üë®‚Äçüíª –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", callback_data="role_executor")
    builder.adjust(1)
    return builder.as_markup()

def get_country_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã"""
    builder = InlineKeyboardBuilder()
    countries = [
        ("üá∑üá∫ –†–æ—Å—Å–∏—è", "russia"),
        ("üá∫üá∏ –°–®–ê", "usa"),
        ("üá™üá∫ –ï–≤—Ä–æ–ø–∞", "europe"),
        ("üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω", "kazakhstan"),
        ("üáßüáæ –ë–µ–ª–∞—Ä—É—Å—å", "belarus"),
        ("üá∫üá¶ –£–∫—Ä–∞–∏–Ω–∞", "ukraine"),
        ("üåç –î—Ä—É–≥–∞—è", "other")
    ]
    
    for name, code in countries:
        builder.button(text=name, callback_data=f"country_{code}")
    
    builder.adjust(2)
    return builder.as_markup()

def get_juridical_type_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞"""
    builder = InlineKeyboardBuilder()
    builder.button(text="üë§ –§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ", callback_data="juridical_individual")
    builder.button(text="üè¢ –û–û–û", callback_data="juridical_llc")
    builder.button(text="üíº –ò–ü", callback_data="juridical_ip")
    builder.adjust(1)
    return builder.as_markup()

def get_payment_types_keyboard(selected_types: list = None) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–æ–≤ –æ–ø–ª–∞—Ç—ã"""
    if selected_types is None:
        selected_types = []
    
    builder = InlineKeyboardBuilder()
    payment_types = [
        ("üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞", "card"),
        ("üíµ –ù–∞–ª–∏—á–Ω—ã–µ", "cash"),
        ("üè¶ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥", "bank_transfer"),
        ("‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", "crypto")
    ]
    
    for name, code in payment_types:
        if code in selected_types:
            builder.button(text=f"‚úÖ {name}", callback_data=f"payment_toggle_{code}")
        else:
            builder.button(text=f"‚ùå {name}", callback_data=f"payment_toggle_{code}")
    
    builder.button(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="payment_done")
    builder.adjust(1)
    return builder.as_markup()

def get_prof_level_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º–∞"""
    builder = InlineKeyboardBuilder()
    levels = [
        ("üü¢ Junior", "junior"),
        ("üü° Middle", "middle"),
        ("üü† Senior", "senior"),
        ("üî¥ Expert", "expert")
    ]
    
    for name, code in levels:
        builder.button(text=name, callback_data=f"prof_level_{code}")
    
    builder.adjust(2)
    return builder.as_markup()

def get_notification_types_keyboard(selected_types: list = None) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    if selected_types is None:
        selected_types = []
    
    builder = InlineKeyboardBuilder()
    notification_types = [
        ("üìã –ù–æ–≤—ã–µ –∑–∞–¥–∞—á–∏", "new_tasks"),
        ("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á", "task_updates"),
        ("üí¨ –°–æ–æ–±—â–µ–Ω–∏—è", "messages"),
        ("üí∞ –ü–ª–∞—Ç–µ–∂–∏", "payments"),
        ("üîî –°–∏—Å—Ç–µ–º–Ω—ã–µ", "system")
    ]
    
    for name, code in notification_types:
        if code in selected_types:
            builder.button(text=f"‚úÖ {name}", callback_data=f"notification_toggle_{code}")
        else:
            builder.button(text=f"‚ùå {name}", callback_data=f"notification_toggle_{code}")
    
    builder.button(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", callback_data="registration_complete")
    builder.adjust(1)
    return builder.as_markup() 