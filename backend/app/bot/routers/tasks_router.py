import logging
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.exceptions import TelegramBadRequest

from ..states.registration_states import TaskCreation
from ..keyboards.main_keyboards import (
    get_main_menu_keyboard, get_task_actions_keyboard,
    get_priority_keyboard, get_confirmation_keyboard
)
from ..keyboards.task_keyboards import get_tasks_menu_keyboard
from ..services.user_service import UserService
from ..services.task_service import TaskService
from app.models.task_status import TaskStatus
from app.models.task_type import TaskType
from app.models.user import User

router = Router(name="tasks_router")
logger = logging.getLogger(__name__)

@router.message(Command("tasks"))
async def show_tasks_menu(message: types.Message, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∑–∞–¥–∞—á"""
    if not user or not user.is_registered:
        await message.answer(
            "‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
        return
    
    await message.answer(
        "üìã <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_task_actions_keyboard(),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "my_tasks")
async def show_my_tasks(callback: types.CallbackQuery, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∑–∞–¥–∞—á–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ –∞–∫–∫–∞—É–Ω—Ç –∫ —Å–∞–π—Ç—É
    # is_linked = True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Å–∞–π—Ç–µ (–∏–º–µ–µ—Ç email) –∏ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ Telegram
    is_linked = user and user.email and user.telegram_id == callback.from_user.id
    
    if not user or not user.is_registered:
        await callback.answer("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
        return
    
    try:
        task_service = TaskService()
        tasks = await task_service.get_user_tasks(user.id)
        
        if not tasks:
            await callback.message.edit_text(
                "üìã <b>–ú–æ–∏ –∑–∞–¥–∞—á–∏</b>\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É!",
                reply_markup=get_main_menu_keyboard(is_admin=user.role == 'admin' if user else False, is_linked=is_linked),
                parse_mode="HTML"
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        tasks_text = "üìã <b>–ú–æ–∏ –∑–∞–¥–∞—á–∏:</b>\n\n"
        for i, task in enumerate(tasks[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            status_emoji = {
                TaskStatus.TODO: "‚è≥",
                TaskStatus.IN_PROGRESS: "üîÑ",
                TaskStatus.DONE: "‚úÖ",
                TaskStatus.CANCELLED: "‚ùå"
            }.get(task.status, "üìù")
            
            tasks_text += (
                f"{i}. {status_emoji} <b>{task.title}</b>\n"
                f"   –°—Ç–∞—Ç—É—Å: {task.status.value}\n"
                f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task.priority}\n"
                f"   –ë—é–¥–∂–µ—Ç: {task.budget or '–ù–µ —É–∫–∞–∑–∞–Ω'} ‚ÇΩ\n\n"
            )
        
        if len(tasks) > 10:
            tasks_text += f"... –∏ –µ—â–µ {len(tasks) - 10} –∑–∞–¥–∞—á"
        
        await callback.message.edit_text(
            tasks_text,
            reply_markup=get_main_menu_keyboard(is_admin=user.role == 'admin' if user else False, is_linked=is_linked),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error showing tasks for user {user.id}: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á.",
            reply_markup=get_main_menu_keyboard(is_admin=user.role == 'admin' if user else False, is_linked=is_linked)
        )

@router.callback_query(F.data == "create_task")
async def start_create_task(callback: types.CallbackQuery, state: FSMContext, user: User):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
    if not user or not user.is_registered:
        await callback.answer("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
        return
    
    await state.set_state(TaskCreation.title)
    await callback.message.edit_text(
        "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏</b>\n\n"
        "üìã <b>–®–∞–≥ 1: –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏</b>\n\n"
        "üí° <b>–ö–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç—å —Ö–æ—Ä–æ—à–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:</b>\n"
        "‚Ä¢ –ö—Ä–∞—Ç–∫–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ\n"
        "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã\n"
        "‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞\n\n"
        "üìù <b>–ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π:</b>\n"
        "‚Ä¢ –°–æ–∑–¥–∞—Ç—å –ª–µ–Ω–¥–∏–Ω–≥ –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞\n"
        "‚Ä¢ –†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
        "‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å —Å—Ç–∞—Ç—å–∏ –¥–ª—è –±–ª–æ–≥–∞\n"
        "‚Ä¢ –°–¥–µ–ª–∞—Ç—å –¥–∏–∑–∞–π–Ω –ª–æ–≥–æ—Ç–∏–ø–∞\n\n"
        "‚ùå <b>–ü–ª–æ—Ö–∏–µ –ø—Ä–∏–º–µ—Ä—ã:</b>\n"
        "‚Ä¢ –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å\n"
        "‚Ä¢ –°–¥–µ–ª–∞—Ç—å —Å–∞–π—Ç\n"
        "‚Ä¢ –†–∞–±–æ—Ç–∞\n\n"
        "üéØ <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏:</b>",
        parse_mode="HTML"
    )

@router.message(TaskCreation.title)
async def get_task_title(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
    title = message.text.strip()
    
    if len(title) < 3:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.\n\n"
            "üí° <b>–°–æ–≤–µ—Ç:</b> –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –∫ –Ω–∞–∑–≤–∞–Ω–∏—é.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: –≤–º–µ—Å—Ç–æ ¬´–°–∞–π—Ç¬ª –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–°–æ–∑–¥–∞—Ç—å —Å–∞–π—Ç-–≤–∏–∑–∏—Ç–∫—É –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏¬ª",
            parse_mode="HTML"
        )
        return
    
    await state.update_data(title=title)
    await state.set_state(TaskCreation.description)
    await message.answer(
        "‚úÖ <b>–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!</b>\n\n"
        "üìÑ <b>–®–∞–≥ 2: –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏</b>\n\n"
        "üí° <b>–ß—Ç–æ –≤–∫–ª—é—á–∏—Ç—å –≤ –æ–ø–∏—Å–∞–Ω–∏–µ:</b>\n"
        "‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ä–∞–±–æ—Ç–µ\n"
        "‚Ä¢ –ñ–µ–ª–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n"
        "‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏\n"
        "‚Ä¢ –°—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n"
        "‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è\n\n"
        "üìù <b>–ü—Ä–∏–º–µ—Ä —Ö–æ—Ä–æ—à–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è:</b>\n"
        "¬´–ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ª–µ–Ω–¥–∏–Ω–≥ –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ –æ–¥–µ–∂–¥—ã. "
        "–°–∞–π—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º, —Å –∫–æ—Ä–∑–∏–Ω–æ–π –ø–æ–∫—É–ø–æ–∫ –∏ —Ñ–æ—Ä–º–æ–π –∑–∞–∫–∞–∑–∞. "
        "–î–∏–∑–∞–π–Ω –≤ —Å—Ç–∏–ª–µ –º–∏–Ω–∏–º–∞–ª–∏–∑–º, —Ü–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ - –±–µ–ª—ã–π –∏ —á–µ—Ä–Ω—ã–π. "
        "–ù—É–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É.¬ª\n\n"
        "üéØ <b>–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∑–∞–¥–∞—á—É –ø–æ–¥—Ä–æ–±–Ω–æ:</b>",
        parse_mode="HTML"
    )

@router.message(TaskCreation.description)
async def get_task_description(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
    description = message.text.strip()
    
    if len(description) < 10:
        await message.answer(
            "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
            "üí° <b>–°–æ–≤–µ—Ç:</b> –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –æ —Ç–æ–º, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å, "
            "–∫–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É, –∫–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å.",
            parse_mode="HTML"
        )
        return
    
    await state.update_data(description=description)
    await state.set_state(TaskCreation.budget)
    await message.answer(
        "‚úÖ <b>–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!</b>\n\n"
        "üí∞ <b>–®–∞–≥ 3: –ë—é–¥–∂–µ—Ç –∑–∞–¥–∞—á–∏</b>\n\n"
        "üí° <b>–ö–∞–∫ —É–∫–∞–∑–∞—Ç—å –±—é–¥–∂–µ—Ç:</b>\n"
        "‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5000)\n"
        "‚Ä¢ –ò–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: 3000-8000)\n"
        "‚Ä¢ –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 0, –µ—Å–ª–∏ –±—é–¥–∂–µ—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω\n\n"
        "üìä <b>–ü—Ä–∏–º–µ—Ä—ã –±—é–¥–∂–µ—Ç–æ–≤:</b>\n"
        "‚Ä¢ –õ–µ–Ω–¥–∏–Ω–≥: 5000-15000 ‚ÇΩ\n"
        "‚Ä¢ –õ–æ–≥–æ—Ç–∏–ø: 2000-8000 ‚ÇΩ\n"
        "‚Ä¢ –°—Ç–∞—Ç—å—è: 500-2000 ‚ÇΩ\n"
        "‚Ä¢ –ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: 50000-200000 ‚ÇΩ\n\n"
        "üí∏ <b>–£–∫–∞–∂–∏—Ç–µ –±—é–¥–∂–µ—Ç –≤ —Ä—É–±–ª—è—Ö:</b>",
        parse_mode="HTML"
    )

@router.message(TaskCreation.budget)
async def get_task_budget(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–∏—Ç—å –±—é–¥–∂–µ—Ç –∑–∞–¥–∞—á–∏"""
    try:
        budget = float(message.text.strip())
        if budget < 0:
            await message.answer("‚ùå –ë—é–¥–∂–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
            return
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
        return
    
    await state.update_data(budget=budget if budget > 0 else None)
    await state.set_state(TaskCreation.priority)
    await message.answer(
        "üí∞ –ë—é–¥–∂–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏:",
        reply_markup=get_priority_keyboard()
    )

@router.callback_query(TaskCreation.priority, F.data.startswith("priority_"))
async def get_task_priority(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏"""
    priority = int(callback.data.split("_")[1])
    
    await state.update_data(priority=priority)
    await state.set_state(TaskCreation.tags)
    await callback.message.edit_text(
        "üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤—ã–±—Ä–∞–Ω!\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥–∏ –¥–ª—è –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞, –¥–∏–∑–∞–π–Ω, —Å—Ä–æ—á–Ω–æ):"
    )

@router.message(TaskCreation.tags)
async def get_task_tags(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–≥–∏ –∑–∞–¥–∞—á–∏"""
    tags_text = message.text.strip()
    tags = [tag.strip() for tag in tags_text.split(",") if tag.strip()]
    
    await state.update_data(tags=tags)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    data = await state.get_data()
    
    summary = (
        "üìã <b>–ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ:</b>\n\n"
        f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['title']}\n"
        f"üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description'][:100]}{'...' if len(data['description']) > 100 else ''}\n"
        f"üí∞ <b>–ë—é–¥–∂–µ—Ç:</b> {data['budget'] or '–ù–µ —É–∫–∞–∑–∞–Ω'} ‚ÇΩ\n"
        f"üéØ <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {data['priority']}\n"
        f"üè∑Ô∏è <b>–¢–µ–≥–∏:</b> {', '.join(data['tags']) if data['tags'] else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}\n\n"
        "–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É?"
    )
    
    await state.set_state(TaskCreation.confirmation)
    await message.answer(
        summary,
        reply_markup=get_confirmation_keyboard("task"),
        parse_mode="HTML"
    )

@router.callback_query(TaskCreation.confirmation, F.data == "confirm_task")
async def confirm_create_task(callback: types.CallbackQuery, state: FSMContext, user: User):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
    try:
        data = await state.get_data()
        
        task_service = TaskService()
        task = await task_service.create_task(
            creator_id=user.id,
            title=data["title"],
            description=data["description"],
            budget=data["budget"],
            priority=data["priority"],
            tags=data["tags"]
        )
        
        await state.clear()
        
        await callback.message.edit_text(
            f"‚úÖ <b>–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
            f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {task.title}\n"
            f"üÜî <b>ID:</b> {task.id}\n"
            f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {task.status.value}\n\n"
            "–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à—É –¥–æ—Å–∫—É.",
            reply_markup=get_main_menu_keyboard(is_admin=user.role == 'admin' if user else False, is_linked=is_linked),
            parse_mode="HTML"
        )
        
        logger.info(f"Task created by user {user.id}: {task.id}")
        
    except Exception as e:
        logger.error(f"Error creating task for user {user.id}: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard(is_admin=user.role == 'admin' if user else False, is_linked=is_linked)
        )

@router.callback_query(F.data.startswith("cancel_"))
async def cancel_action(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ"""
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_main_menu_keyboard(is_admin=user.role == 'admin' if user else False, is_linked=is_linked)
    ) 

@router.callback_query(F.data == "tasks")
async def tasks_menu_handler(callback: types.CallbackQuery, user: User):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í—Å–µ –∑–∞–¥–∞—á–∏"
    """
    if not user or not user.is_registered:
        await callback.answer("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
        return
    
    try:
        task_service = TaskService()
        tasks = await task_service.get_user_tasks(user.id)
        
        if not tasks:
            await callback.message.edit_text(
                "üìã <b>–í—Å–µ –∑–∞–¥–∞—á–∏</b>\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É!",
                reply_markup=get_tasks_menu_keyboard(),
                parse_mode="HTML"
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        tasks_text = "üìã <b>–í—Å–µ –∑–∞–¥–∞—á–∏:</b>\n\n"
        for i, task in enumerate(tasks[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            status_emoji = {
                'open': 'üü¢',
                'in_progress': 'üü°',
                'completed': '‚úÖ',
                'cancelled': '‚ùå'
            }.get(task.status, 'üìù')
            
            priority_emoji = {
                1: 'üü¢',
                2: 'üü°',
                3: 'üü†',
                4: 'üî¥'
            }.get(task.priority, '‚ö™')
            
            tasks_text += (
                f"{i}. {status_emoji} <b>{task.title}</b>\n"
                f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority_emoji} {task.priority}\n"
                f"   –°—Ç–∞—Ç—É—Å: {task.status}\n"
                f"   –°–æ–∑–¥–∞–Ω–∞: {task.created_at.strftime('%d.%m.%Y')}\n\n"
            )
        
        if len(tasks) > 10:
            tasks_text += f"... –∏ –µ—â–µ {len(tasks) - 10} –∑–∞–¥–∞—á"
        
        try:
            await callback.message.edit_text(
                tasks_text,
                reply_markup=get_tasks_menu_keyboard(),
                parse_mode="HTML"
            )
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                pass
            else:
                raise
        
    except Exception as e:
        logger.error(f"Error showing tasks for user {user.id}: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á.",
            reply_markup=get_tasks_menu_keyboard()
        ) 

@router.callback_query(F.data.startswith("edit_task:"))
async def edit_task_colon_handler(callback: types.CallbackQuery, user: User):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É" (—Å –¥–≤–æ–µ—Ç–æ—á–∏–µ–º)
    """
    if not user or not user.is_registered:
        await callback.answer("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
        return
    
    try:
        task_id = int(callback.data.split(":")[-1])
        task_service = TaskService()
        task = await task_service.get_task_by_id(task_id)
        
        if not task:
            await callback.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
            return
        
        if task.creator_id != user.id:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏!", show_alert=True)
            return
        
        edit_text = (
            f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏</b>\n\n"
            f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {task.title}\n"
            f"üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {task.description[:100]}{'...' if len(task.description) > 100 else ''}\n"
            f"üí∞ <b>–ë—é–¥–∂–µ—Ç:</b> {task.budget or '–ù–µ —É–∫–∞–∑–∞–Ω'} ‚ÇΩ\n"
            f"üéØ <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {task.priority}\n"
            f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {task.status.value}\n\n"
            f"üí° <b>–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç:</b>\n"
            f"üåê <a href='http://localhost:3000/tasks/{task_id}/edit'>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É</a>"
        )
        
        from ..keyboards.task_keyboards import get_task_keyboard
        await callback.message.edit_text(
            edit_text,
            reply_markup=get_task_keyboard(task_id),
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        
    except Exception as e:
        logger.error(f"Error editing task: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)

@router.callback_query(F.data.startswith("delete_task:"))
async def delete_task_colon_handler(callback: types.CallbackQuery, user: User):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É" (—Å –¥–≤–æ–µ—Ç–æ—á–∏–µ–º)
    """
    if not user or not user.is_registered:
        await callback.answer("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
        return
    
    try:
        task_id = int(callback.data.split(":")[-1])
        task_service = TaskService()
        task = await task_service.get_task_by_id(task_id)
        
        if not task:
            await callback.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
            return
        
        if task.creator_id != user.id:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏!", show_alert=True)
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        confirm_text = (
            f"üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏</b>\n\n"
            f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {task.title}\n"
            f"üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {task.description[:100]}{'...' if len(task.description) > 100 else ''}\n"
            f"üí∞ <b>–ë—é–¥–∂–µ—Ç:</b> {task.budget or '–ù–µ —É–∫–∞–∑–∞–Ω'} ‚ÇΩ\n\n"
            f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n"
            f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å. –ó–∞–¥–∞—á–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ –Ω–∞–≤—Å–µ–≥–¥–∞.\n\n"
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É?"
        )
        
        from ..keyboards.main_keyboards import get_confirmation_keyboard
        await callback.message.edit_text(
            confirm_text,
            reply_markup=get_confirmation_keyboard("delete_task", task_id),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error deleting task: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)

@router.callback_query(F.data.startswith("complete_task_"))
async def complete_task_handler(callback: types.CallbackQuery, user: User):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É"
    """
    if not user or not user.is_registered:
        await callback.answer("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
        return
    
    try:
        task_id = int(callback.data.split("_")[-1])
        task_service = TaskService()
        task = await task_service.get_task_by_id(task_id)
        
        if not task:
            await callback.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
            return
        
        if task.creator_id != user.id:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏!", show_alert=True)
            return
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É
        await task_service.update_task_status(task_id, TaskStatus.DONE)
        
        complete_text = (
            f"‚úÖ <b>–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {task.title}\n"
            f"üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {task.description[:100]}{'...' if len(task.description) > 100 else ''}\n"
            f"üí∞ <b>–ë—é–¥–∂–µ—Ç:</b> {task.budget or '–ù–µ —É–∫–∞–∑–∞–Ω'} ‚ÇΩ\n"
            f"üìÖ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–∞:</b> {task.updated_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –∑–∞–¥–∞—á–∏!</b>"
        )
        
        await callback.message.edit_text(
            complete_text,
            reply_markup=get_main_menu_keyboard(is_admin=user.role == 'admin' if user else False, is_linked=is_linked),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error completing task: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)

@router.callback_query(F.data.startswith("assign_task_"))
async def assign_task_handler(callback: types.CallbackQuery, user: User):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É"
    """
    if not user or not user.is_registered:
        await callback.answer("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
        return
    
    try:
        task_id = int(callback.data.split("_")[-1])
        task_service = TaskService()
        task = await task_service.get_task_by_id(task_id)
        
        if not task:
            await callback.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
            return
        
        if task.creator_id != user.id:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏!", show_alert=True)
            return
        
        assign_text = (
            f"üë§ <b>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏</b>\n\n"
            f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {task.title}\n"
            f"üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {task.description[:100]}{'...' if len(task.description) > 100 else ''}\n"
            f"üí∞ <b>–ë—é–¥–∂–µ—Ç:</b> {task.budget or '–ù–µ —É–∫–∞–∑–∞–Ω'} ‚ÇΩ\n\n"
            f"üí° <b>–î–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç:</b>\n"
            f"üåê <a href='http://localhost:3000/tasks/{task_id}/assign'>–ù–∞–∑–Ω–∞—á–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è</a>\n\n"
            f"–¢–∞–º –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n"
            f"‚Ä¢ –í—ã–±—Ä–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞\n"
            f"‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤\n"
            f"‚Ä¢ –û–±—Å—É–¥–∏—Ç—å —É—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã\n"
            f"‚Ä¢ –ù–∞–∑–Ω–∞—á–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"
        )
        
        await callback.message.edit_text(
            assign_text,
            reply_markup=get_main_menu_keyboard(is_admin=user.role == 'admin' if user else False, is_linked=is_linked),
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        
    except Exception as e:
        logger.error(f"Error assigning task: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True) 

@router.callback_query(F.data == "back_to_tasks")
async def back_to_tasks_handler(callback: types.CallbackQuery, user: User):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞—á–∞–º"
    """
    if not user or not user.is_registered:
        await callback.answer("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
        return
    
    try:
        task_service = TaskService()
        tasks = await task_service.get_user_tasks(user.id)
        
        if not tasks:
            await callback.message.edit_text(
                "üìã <b>–ú–æ–∏ –∑–∞–¥–∞—á–∏</b>\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É!",
                reply_markup=get_task_actions_keyboard(),
                parse_mode="HTML"
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        tasks_text = "üìã <b>–ú–æ–∏ –∑–∞–¥–∞—á–∏:</b>\n\n"
        for i, task in enumerate(tasks[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            status_emoji = {
                TaskStatus.TODO: "‚è≥",
                TaskStatus.IN_PROGRESS: "üîÑ",
                TaskStatus.DONE: "‚úÖ",
                TaskStatus.CANCELLED: "‚ùå"
            }.get(task.status, "üìù")
            
            tasks_text += (
                f"{i}. {status_emoji} <b>{task.title}</b>\n"
                f"   –°—Ç–∞—Ç—É—Å: {task.status.value}\n"
                f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task.priority}\n"
                f"   –ë—é–¥–∂–µ—Ç: {task.budget or '–ù–µ —É–∫–∞–∑–∞–Ω'} ‚ÇΩ\n\n"
            )
        
        if len(tasks) > 10:
            tasks_text += f"... –∏ –µ—â–µ {len(tasks) - 10} –∑–∞–¥–∞—á"
        
        await callback.message.edit_text(
            tasks_text,
            reply_markup=get_task_actions_keyboard(),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error showing tasks for user {user.id}: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á.",
            reply_markup=get_task_actions_keyboard()
        ) 

@router.callback_query(F.data.startswith("edit_task_"))
async def edit_task_handler(callback: types.CallbackQuery, user: User):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É" (—Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º)
    """
    if not user or not user.is_registered:
        await callback.answer("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
        return
    
    try:
        task_id = int(callback.data.split("_")[-1])
        task_service = TaskService()
        task = await task_service.get_task_by_id(task_id)
        
        if not task:
            await callback.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
            return
        
        if task.creator_id != user.id:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏!", show_alert=True)
            return
        
        edit_text = (
            f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏</b>\n\n"
            f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {task.title}\n"
            f"üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {task.description[:100]}{'...' if len(task.description) > 100 else ''}\n"
            f"üí∞ <b>–ë—é–¥–∂–µ—Ç:</b> {task.budget or '–ù–µ —É–∫–∞–∑–∞–Ω'} ‚ÇΩ\n"
            f"üéØ <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {task.priority}\n"
            f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {task.status.value}\n\n"
            f"üí° <b>–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç:</b>\n"
            f"üåê <a href='http://localhost:3000/tasks/{task_id}/edit'>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É</a>"
        )
        
        await callback.message.edit_text(
            edit_text,
            reply_markup=get_main_menu_keyboard(is_admin=user.role == 'admin' if user else False, is_linked=is_linked),
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        
    except Exception as e:
        logger.error(f"Error editing task: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)

@router.callback_query(F.data.startswith("delete_task_"))
async def delete_task_handler(callback: types.CallbackQuery, user: User):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É" (—Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º)
    """
    if not user or not user.is_registered:
        await callback.answer("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
        return
    
    try:
        task_id = int(callback.data.split("_")[-1])
        task_service = TaskService()
        task = await task_service.get_task_by_id(task_id)
        
        if not task:
            await callback.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
            return
        
        if task.creator_id != user.id:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏!", show_alert=True)
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        confirm_text = (
            f"üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏</b>\n\n"
            f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {task.title}\n"
            f"üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {task.description[:100]}{'...' if len(task.description) > 100 else ''}\n"
            f"üí∞ <b>–ë—é–¥–∂–µ—Ç:</b> {task.budget or '–ù–µ —É–∫–∞–∑–∞–Ω'} ‚ÇΩ\n\n"
            f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n"
            f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å. –ó–∞–¥–∞—á–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ –Ω–∞–≤—Å–µ–≥–¥–∞.\n\n"
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É?"
        )
        
        from ..keyboards.main_keyboards import get_confirmation_keyboard
        await callback.message.edit_text(
            confirm_text,
            reply_markup=get_confirmation_keyboard("delete_task", task_id),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error deleting task: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)

@router.callback_query(F.data.startswith("complete_task_"))
async def complete_task_handler(callback: types.CallbackQuery, user: User):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É"
    """
    if not user or not user.is_registered:
        await callback.answer("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
        return
    
    try:
        task_id = int(callback.data.split("_")[-1])
        task_service = TaskService()
        task = await task_service.get_task_by_id(task_id)
        
        if not task:
            await callback.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
            return
        
        if task.creator_id != user.id:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏!", show_alert=True)
            return
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É
        await task_service.update_task_status(task_id, TaskStatus.DONE)
        
        complete_text = (
            f"‚úÖ <b>–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {task.title}\n"
            f"üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {task.description[:100]}{'...' if len(task.description) > 100 else ''}\n"
            f"üí∞ <b>–ë—é–¥–∂–µ—Ç:</b> {task.budget or '–ù–µ —É–∫–∞–∑–∞–Ω'} ‚ÇΩ\n"
            f"üìÖ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–∞:</b> {task.updated_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –∑–∞–¥–∞—á–∏!</b>"
        )
        
        await callback.message.edit_text(
            complete_text,
            reply_markup=get_main_menu_keyboard(is_admin=user.role == 'admin' if user else False, is_linked=is_linked),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error completing task: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)

@router.callback_query(F.data.startswith("assign_task_"))
async def assign_task_handler(callback: types.CallbackQuery, user: User):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É"
    """
    if not user or not user.is_registered:
        await callback.answer("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
        return
    
    try:
        task_id = int(callback.data.split("_")[-1])
        task_service = TaskService()
        task = await task_service.get_task_by_id(task_id)
        
        if not task:
            await callback.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
            return
        
        if task.creator_id != user.id:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏!", show_alert=True)
            return
        
        assign_text = (
            f"üë§ <b>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏</b>\n\n"
            f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {task.title}\n"
            f"üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {task.description[:100]}{'...' if len(task.description) > 100 else ''}\n"
            f"üí∞ <b>–ë—é–¥–∂–µ—Ç:</b> {task.budget or '–ù–µ —É–∫–∞–∑–∞–Ω'} ‚ÇΩ\n\n"
            f"üí° <b>–î–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç:</b>\n"
            f"üåê <a href='http://localhost:3000/tasks/{task_id}/assign'>–ù–∞–∑–Ω–∞—á–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è</a>\n\n"
            f"–¢–∞–º –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n"
            f"‚Ä¢ –í—ã–±—Ä–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞\n"
            f"‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤\n"
            f"‚Ä¢ –û–±—Å—É–¥–∏—Ç—å —É—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã\n"
            f"‚Ä¢ –ù–∞–∑–Ω–∞—á–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"
        )
        
        await callback.message.edit_text(
            assign_text,
            reply_markup=get_main_menu_keyboard(is_admin=user.role == 'admin' if user else False, is_linked=is_linked),
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        
    except Exception as e:
        logger.error(f"Error assigning task: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True) 