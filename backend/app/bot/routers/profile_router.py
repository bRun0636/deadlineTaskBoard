import logging
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from ..keyboards.profile_keyboards import get_profile_keyboard
from ..services.user_service import UserService

router = Router(name="profile_router")
logger = logging.getLogger(__name__)


@router.callback_query(F.data == "profile")
async def profile_menu_handler(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è
    """
    user_service = UserService()
    user = await user_service.get_user_by_telegram_id(callback.from_user.id)
    
    if not user or not user.is_registered:
        await callback.message.edit_text(
            "‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.\n\n"
            "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç–µ.\n"
            "üåê <a href='http://localhost:3000/register'>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</a>",
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        await callback.answer()
        return
    
    profile_text = (
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"–ò–º—è: {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"Email: {user.email or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"–†–æ–ª—å: {user.role or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        f"Telegram ID: {user.telegram_id}\n"
        f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.created_at.strftime('%d.%m.%Y') if user.created_at else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n"
        f"üåê <a href='http://localhost:3000/profile'>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å</a>"
    )
    
    await callback.message.edit_text(
        profile_text,
        reply_markup=get_profile_keyboard(),
        parse_mode="HTML",
        disable_web_page_preview=True
    )
    await callback.answer()


@router.callback_query(F.data == "edit_profile")
async def edit_profile_handler(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    """
    await callback.message.edit_text(
        "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è</b>\n\n"
        "–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç:\n\n"
        "üåê <a href='http://localhost:3000/profile'>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å</a>\n\n"
        "–¢–∞–º –≤—ã —Å–º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:\n"
        "‚Ä¢ –ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—é\n"
        "‚Ä¢ Email\n"
        "‚Ä¢ –ü–∞—Ä–æ–ª—å\n"
        "‚Ä¢ –†–æ–ª—å\n"
        "‚Ä¢ –î—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
        reply_markup=get_profile_keyboard(),
        parse_mode="HTML",
        disable_web_page_preview=True
    )
    await callback.answer()


@router.callback_query(F.data == "statistics")
async def statistics_handler(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_service = UserService()
    user = await user_service.get_user_by_telegram_id(callback.from_user.id)
    
    if not user or not user.is_registered:
        await callback.message.edit_text(
            "‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.\n\n"
            "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç–µ.\n"
            "üåê <a href='http://localhost:3000/register'>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</a>",
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    stats = await user_service.get_user_statistics(user.id)
    
    stats_text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"–°–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {stats.get('tasks_created', 0)}\n"
        f"–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {stats.get('tasks_completed', 0)}\n"
        f"–°–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {stats.get('orders_created', 0)}\n"
        f"–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {stats.get('orders_completed', 0)}\n"
        f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {stats.get('messages_sent', 0)}\n"
        f"–ü–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {stats.get('proposals_received', 0)}\n\n"
        f"üåê <a href='http://localhost:3000/dashboard'>–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ —Å–∞–π—Ç–µ</a>"
    )
    
    await callback.message.edit_text(
        stats_text,
        reply_markup=get_profile_keyboard(),
        parse_mode="HTML",
        disable_web_page_preview=True
    )
    await callback.answer()


@router.message(Command("profile"))
async def profile_command_handler(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile
    """
    user_service = UserService()
    user = await user_service.get_user_by_telegram_id(message.from_user.id)
    
    if not user or not user.is_registered:
        await message.answer(
            "‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.\n\n"
            "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç–µ.\n"
            "üåê <a href='http://localhost:3000/register'>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</a>",
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        return
    
    profile_text = (
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"–ò–º—è: {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"Email: {user.email or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"–†–æ–ª—å: {user.role or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        f"Telegram ID: {user.telegram_id}\n"
        f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.created_at.strftime('%d.%m.%Y') if user.created_at else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n"
        f"üåê <a href='http://localhost:3000/profile'>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å</a>"
    )
    
    await message.answer(
        profile_text,
        parse_mode="HTML",
        disable_web_page_preview=True
    ) 

@router.callback_query(F.data == "my_reviews")
async def my_reviews_handler(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –æ—Ç–∑—ã–≤—ã"
    """
    reviews_text = (
        "‚≠ê <b>–ú–æ–∏ –æ—Ç–∑—ã–≤—ã</b>\n\n"
        "üìù <b>–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã:</b>\n"
        "‚Ä¢ –û—Ç @alex_dev: \"–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ë—ã—Å—Ç—Ä–æ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ\" ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê\n"
        "‚Ä¢ –û—Ç @maria_design: \"–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥\" ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê\n"
        "‚Ä¢ –û—Ç @ivan_copy: \"–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ\" ‚≠ê‚≠ê‚≠ê‚≠ê\n\n"
        "üìù <b>–û—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã:</b>\n"
        "‚Ä¢ –î–ª—è @dmitry_web: \"–•–æ—Ä–æ—à–∏–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å\" ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê\n"
        "‚Ä¢ –î–ª—è @elena_ui: \"–†–µ–∫–æ–º–µ–Ω–¥—É—é\" ‚≠ê‚≠ê‚≠ê‚≠ê\n\n"
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤:</b>\n"
        "‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: 4.6 ‚≠ê\n"
        "‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: 8\n"
        "‚Ä¢ –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö: 7\n"
        "‚Ä¢ –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö: 1\n"
        "‚Ä¢ –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö: 0\n\n"
        "üí° <b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –æ—Ç–∑—ã–≤–æ–≤:</b>\n"
        "‚Ä¢ –í—ã–ø–æ–ª–Ω—è–π—Ç–µ —Ä–∞–±–æ—Ç—É –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ\n"
        "‚Ä¢ –°–æ–±–ª—é–¥–∞–π—Ç–µ –¥–µ–¥–ª–∞–π–Ω—ã\n"
        "‚Ä¢ –û–±—â–∞–π—Ç–µ—Å—å —Å –∑–∞–∫–∞–∑—á–∏–∫–∞–º–∏\n"
        "‚Ä¢ –ü—Ä–æ—Å–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è\n\n"
        "üåê <a href='http://localhost:3000/profile/reviews'>–ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ —Å–∞–π—Ç–µ</a>"
    )
    
    await callback.message.edit_text(
        reviews_text,
        reply_markup=get_profile_keyboard(),
        parse_mode="HTML",
        disable_web_page_preview=True
    )
    await callback.answer() 