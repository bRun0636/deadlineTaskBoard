import logging
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command

from ..keyboards.main_keyboards import (
    get_main_menu_keyboard, get_profile_keyboard,
    get_rating_menu_keyboard, get_settings_menu_keyboard
)
from ..services.user_service import UserService
from app.models.user import User, UserRole

def get_role_display_name(role):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ä–æ–ª—å –≤ –ø–æ–Ω—è—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"""
    role_mapping = {
        UserRole.ADMIN: "üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
        UserRole.CUSTOMER: "üë§ –ó–∞–∫–∞–∑—á–∏–∫", 
        UserRole.EXECUTOR: "üë®‚Äçüíª –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"
    }
    return role_mapping.get(role, str(role))

router = Router(name="profile_router")
logger = logging.getLogger(__name__)


@router.callback_query(F.data == "profile")
async def profile_menu_handler(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è
    """
    user_service = UserService()
    user = await user_service.get_user_by_telegram_id(callback.from_user.id)
    
    if not user or not user.is_registered:
        await callback.message.edit_text(
            "‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.\n\n"
            "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç–µ.\n"
            "üåê <a href='http://localhost:3000/register'>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</a>",
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        await callback.answer()
        return
    
    profile_text = (
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"–ò–º—è: {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"Email: {user.email or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"–†–æ–ª—å: {get_role_display_name(user.role) or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        f"Telegram ID: {user.telegram_id}\n"
        f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.created_at.strftime('%d.%m.%Y') if user.created_at else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n"
        f"üåê <a href='http://localhost:3000/profile'>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å</a>"
    )
    
    await callback.message.edit_text(
        profile_text,
        reply_markup=get_profile_keyboard(),
        parse_mode="HTML",
        disable_web_page_preview=True
    )
    await callback.answer()


@router.callback_query(F.data == "edit_profile")
async def edit_profile_handler(callback: types.CallbackQuery, user: User):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"""
    if not user or not user.is_registered:
        await callback.answer("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
        return
    
    edit_text = (
        "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è</b>\n\n"
        f"üë§ <b>–ò–º—è:</b> {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"üìù <b>–§–∞–º–∏–ª–∏—è:</b> {user.last_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"üìß <b>Email:</b> {user.email or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üåç <b>–°—Ç—Ä–∞–Ω–∞:</b> {user.country or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        f"üíº <b>–¢–∏–ø:</b> {user.juridical_type or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üìä <b>–£—Ä–æ–≤–µ–Ω—å:</b> {user.prof_level or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
    )
    
    from ..keyboards.profile_keyboards import get_profile_edit_keyboard
    await callback.message.edit_text(
        edit_text,
        reply_markup=get_profile_edit_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "statistics")
async def statistics_handler(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_service = UserService()
    user = await user_service.get_user_by_telegram_id(callback.from_user.id)
    
    if not user or not user.is_registered:
        await callback.message.edit_text(
            "‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.\n\n"
            "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç–µ.\n"
            "üåê <a href='http://localhost:3000/register'>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</a>",
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    stats = await user_service.get_user_statistics(user.id)
    
    stats_text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"–°–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {stats.get('tasks_created', 0)}\n"
        f"–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {stats.get('tasks_completed', 0)}\n"
        f"–°–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {stats.get('orders_created', 0)}\n"
        f"–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {stats.get('orders_completed', 0)}\n"
        f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {stats.get('messages_sent', 0)}\n"
        f"–ü–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {stats.get('proposals_received', 0)}\n\n"
        f"üåê <a href='http://localhost:3000/dashboard'>–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ —Å–∞–π—Ç–µ</a>"
    )
    
    await callback.message.edit_text(
        stats_text,
        reply_markup=get_profile_keyboard(),
        parse_mode="HTML",
        disable_web_page_preview=True
    )
    await callback.answer()


@router.message(Command("profile"))
async def show_profile_menu(message: types.Message, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è"""
    if not user:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å /start"
        )
        return
    
    if not user.is_registered:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        profile_text = (
            "üë§ <b>–í–∞—à –±–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
            f"üìù <b>–ò–º—è:</b> {user.first_name or user.username or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üÜî <b>Telegram ID:</b> {user.telegram_id}\n"
            f"üìÖ <b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> {user.created_at.strftime('%d.%m.%Y')}\n"
            f"üé≠ <b>–†–æ–ª—å:</b> {get_role_display_name(user.role)}\n"
            f"‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> –ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω\n\n"
            "üí° <b>–î–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º:</b>\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>/register</code> –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n"
            "‚Ä¢ –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –Ω–∞–≤—ã–∫–∞–º–∏ –∏ –æ–ø—ã—Ç–æ–º\n"
            "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å: –∑–∞–∫–∞–∑—á–∏–∫ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å\n\n"
            "üöÄ <b>–ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å —Å–µ–π—á–∞—Å:</b>\n"
            "‚Ä¢ <code>/help</code> - –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
            "‚Ä¢ <code>/guide</code> - –∏–∑—É—á–∏—Ç—å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ\n"
            "‚Ä¢ <code>/quickstart</code> - –±—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç\n"
            "‚Ä¢ <code>/me</code> - –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—é–º–µ\n\n"
            "üåê <b>–¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤–µ–±-–≤–µ—Ä—Å–∏—è:</b>\n"
            "<a href='http://localhost:3000'>–û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç</a>"
        )
        
        await message.answer(
            profile_text,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        return
    
    await message.answer(
        "üë§ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_profile_keyboard(),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "profile")
async def show_profile_handler(callback: types.CallbackQuery, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not user or not user.is_registered:
        await callback.answer("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ
    profile_text = "üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
    profile_text += f"üìù <b>–ò–º—è:</b> {user.first_name or user.username or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
    profile_text += f"üìß <b>Email:</b> {user.email or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
    profile_text += f"üé≠ <b>–†–æ–ª—å:</b> {get_role_display_name(user.role)}\n"
    profile_text += f"üÜî <b>Telegram ID:</b> {user.telegram_id}\n"
    profile_text += f"üìÖ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {user.created_at.strftime('%d.%m.%Y')}\n"
    
    if user.rating:
        profile_text += f"‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥:</b> {user.rating}\n"
    if user.completed_tasks:
        profile_text += f"‚úÖ <b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á:</b> {user.completed_tasks}\n"
    if user.total_earnings:
        profile_text += f"üí∞ <b>–û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫:</b> {user.total_earnings} ‚ÇΩ\n"
    
    from ..utils.message_utils import safe_edit_message
    
    success = await safe_edit_message(
        message=callback.message,
        text=profile_text,
        reply_markup=get_profile_keyboard(),
        parse_mode="HTML"
    )
    
    if not success:
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", show_alert=True)

@router.callback_query(F.data == "rating")
async def show_rating_menu_handler(callback: types.CallbackQuery, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–π—Ç–∏–Ω–≥–∞"""
    if not user or not user.is_registered:
        await callback.answer("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
        return
    
    await callback.message.edit_text(
        "‚≠ê <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–º</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_rating_menu_keyboard(),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "my_rating")
async def show_my_rating(callback: types.CallbackQuery, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–π —Ä–µ–π—Ç–∏–Ω–≥"""
    if not user or not user.is_registered:
        await callback.answer("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
        return
    
    rating_text = "‚≠ê <b>–ú–æ–π —Ä–µ–π—Ç–∏–Ω–≥</b>\n\n"
    rating_text += f"üéØ <b>–¢–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥:</b> {user.rating or 0.0}\n"
    rating_text += f"‚úÖ <b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á:</b> {user.completed_tasks or 0}\n"
    rating_text += f"üí∞ <b>–û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫:</b> {user.total_earnings or 0} ‚ÇΩ\n"
    rating_text += f"üìÖ <b>–í —Å–∏—Å—Ç–µ–º–µ —Å:</b> {user.created_at.strftime('%d.%m.%Y')}\n\n"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user.rating and user.rating >= 4.5:
        level = "üèÜ –≠–∫—Å–ø–µ—Ä—Ç"
    elif user.rating and user.rating >= 4.0:
        level = "‚≠ê –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª"
    elif user.rating and user.rating >= 3.5:
        level = "üë®‚Äçüíº –û–ø—ã—Ç–Ω—ã–π"
    elif user.rating and user.rating >= 3.0:
        level = "üë®‚Äçüíª –ù–∞—á–∏–Ω–∞—é—â–∏–π"
    else:
        level = "üå± –ù–æ–≤–∏—á–æ–∫"
    
    rating_text += f"üéñÔ∏è <b>–£—Ä–æ–≤–µ–Ω—å:</b> {level}"
    
    from ..utils.message_utils import safe_edit_message
    
    success = await safe_edit_message(
        message=callback.message,
        text=rating_text,
        reply_markup=get_rating_menu_keyboard(),
        parse_mode="HTML"
    )
    
    if not success:
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", show_alert=True)

@router.callback_query(F.data == "top_executors")
async def show_top_executors(callback: types.CallbackQuery, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π"""
    if not user or not user.is_registered:
        await callback.answer("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–ø –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    from ..services.user_service import UserService
    user_service = UserService()
    top_executors = await user_service.get_top_executors(10)
    
    if not top_executors:
        executors_text = "üèÜ <b>–¢–æ–ø –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π:</b>\n\n"
        executors_text += "üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è—Ö.\n"
        executors_text += "–†–µ–π—Ç–∏–Ω–≥–∏ –ø–æ—è–≤—è—Ç—Å—è, –∫–æ–≥–¥–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –Ω–∞—á–Ω—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞—á–∏."
    else:
        executors_text = "üèÜ <b>–¢–æ–ø –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π:</b>\n\n"
        for i, executor in enumerate(top_executors, 1):
            rating = executor.rating or 0.0
            completed_tasks = executor.completed_tasks or 0
            
            executors_text += f"{i}. <b>{executor.display_name}</b>\n"
            executors_text += f"   ‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating:.1f}\n"
            executors_text += f"   ‚úÖ –ó–∞–¥–∞—á: {completed_tasks}\n\n"
    
    from ..utils.message_utils import safe_edit_message
    
    success = await safe_edit_message(
        message=callback.message,
        text=executors_text,
        reply_markup=get_rating_menu_keyboard(),
        parse_mode="HTML"
    )
    
    if not success:
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", show_alert=True)

@router.callback_query(F.data == "top_customers")
async def show_top_customers(callback: types.CallbackQuery, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –∑–∞–∫–∞–∑—á–∏–∫–æ–≤"""
    if not user or not user.is_registered:
        await callback.answer("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
        from ..services.user_service import UserService
        user_service = UserService()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –∑–∞–∫–∞–∑—á–∏–∫–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–∫–∞–∑–æ–≤
        from app.database import get_db
        from app.models.user import User
        from app.models.order import Order
        from sqlalchemy import func
        
        db = next(get_db())
        
        # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø –∑–∞–∫–∞–∑—á–∏–∫–æ–≤
        top_customers = db.query(
            User,
            func.count(Order.id).label('order_count'),
            func.avg(User.rating).label('avg_rating')
        ).join(Order, User.id == Order.creator_id)\
         .filter(User.role == 'customer')\
         .group_by(User.id)\
         .order_by(func.count(Order.id).desc())\
         .limit(10)\
         .all()
        
        if not top_customers:
            customers_text = "üìä <b>–†–µ–π—Ç–∏–Ω–≥ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤:</b>\n\n"
            customers_text += "üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑—á–∏–∫–∞—Ö.\n"
            customers_text += "–ó–∞–∫–∞–∑—ã –ø–æ—è–≤—è—Ç—Å—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏—Ö —Å–æ–∑–¥–∞–¥—É—Ç."
        else:
            customers_text = "üìä <b>–†–µ–π—Ç–∏–Ω–≥ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤:</b>\n\n"
            
            for i, (customer, order_count, avg_rating) in enumerate(top_customers, 1):
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–π—Ç–∏–Ω–≥
                rating_text = f"{avg_rating:.1f}" if avg_rating else "0.0"
                
                customers_text += f"{i}. <b>{customer.display_name}</b>\n"
                customers_text += f"   ‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating_text}\n"
                customers_text += f"   üì¶ –ó–∞–∫–∞–∑–æ–≤: {order_count}\n\n"
        
        db.close()
        
        from ..utils.message_utils import safe_edit_message
        
        success = await safe_edit_message(
            message=callback.message,
            text=customers_text,
            reply_markup=get_rating_menu_keyboard(),
            parse_mode="HTML"
        )
        
        if not success:
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", show_alert=True)
            
    except Exception as e:
        logger.error(f"Error showing top customers: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)

@router.callback_query(F.data == "my_statistics")
async def show_my_statistics(callback: types.CallbackQuery, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    if not user or not user.is_registered:
        await callback.answer("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
        return
    
    stats_text = "üìà <b>–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
    stats_text += f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å:</b>\n"
    stats_text += f"   ‚Ä¢ –ò–º—è: {user.first_name or user.username}\n"
    stats_text += f"   ‚Ä¢ –†–æ–ª—å: {get_role_display_name(user.role)}\n"
    stats_text += f"   ‚Ä¢ –í —Å–∏—Å—Ç–µ–º–µ: {user.created_at.strftime('%d.%m.%Y')}\n\n"
    
    stats_text += f"üìä <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>\n"
    stats_text += f"   ‚Ä¢ –†–µ–π—Ç–∏–Ω–≥: {user.rating or 0.0}\n"
    stats_text += f"   ‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {user.completed_tasks or 0}\n"
    stats_text += f"   ‚Ä¢ –û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: {user.total_earnings or 0} ‚ÇΩ\n"
    stats_text += f"   ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user.last_activity.strftime('%d.%m.%Y %H:%M') if user.last_activity else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
    
    from ..utils.message_utils import safe_edit_message
    
    success = await safe_edit_message(
        message=callback.message,
        text=stats_text,
        reply_markup=get_rating_menu_keyboard(),
        parse_mode="HTML"
    )
    
    if not success:
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", show_alert=True)

@router.callback_query(F.data == "settings")
async def show_settings_menu_handler(callback: types.CallbackQuery, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    if not user or not user.is_registered:
        await callback.answer("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
        return
    
    await callback.message.edit_text(
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫:",
        reply_markup=get_settings_menu_keyboard(),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "notification_settings")
async def show_notification_settings(callback: types.CallbackQuery, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    if not user or not user.is_registered:
        await callback.answer("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
        return
    
    settings_text = "üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
    settings_text += "üì± <b>Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> ‚úÖ –í–∫–ª—é—á–µ–Ω—ã\n"
    settings_text += "üìß <b>Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> ‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã\n"
    settings_text += "üì≤ <b>Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> ‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã\n\n"
    settings_text += "üí° <b>–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ:</b>\n"
    settings_text += "‚Ä¢ –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –≤ –≤–∞—à–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n"
    settings_text += "‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–æ–≤/–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π\n"
    settings_text += "‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á\n"
    settings_text += "‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
    
    from ..utils.message_utils import safe_edit_message
    
    success = await safe_edit_message(
        message=callback.message,
        text=settings_text,
        reply_markup=get_settings_menu_keyboard(),
        parse_mode="HTML"
    )
    
    if not success:
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", show_alert=True)

@router.callback_query(F.data == "language_settings")
async def show_language_settings(callback: types.CallbackQuery, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞"""
    if not user or not user.is_registered:
        await callback.answer("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
        return
    
    settings_text = "üåç <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞</b>\n\n"
    settings_text += "üá∑üá∫ <b>–¢–µ–∫—É—â–∏–π —è–∑—ã–∫:</b> –†—É—Å—Å–∫–∏–π\n\n"
    settings_text += "üìù <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏:</b>\n"
    settings_text += "‚Ä¢ üá∑üá∫ –†—É—Å—Å–∫–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)\n"
    settings_text += "‚Ä¢ üá∫üá∏ English (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)\n"
    settings_text += "‚Ä¢ üá™üá∏ Espa√±ol (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)\n"
    settings_text += "‚Ä¢ üá®üá≥ ‰∏≠Êñá (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)"
    
    from ..utils.message_utils import safe_edit_message
    
    success = await safe_edit_message(
        message=callback.message,
        text=settings_text,
        reply_markup=get_settings_menu_keyboard(),
        parse_mode="HTML"
    )
    
    if not success:
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", show_alert=True)

@router.callback_query(F.data == "privacy_settings")
async def show_privacy_settings(callback: types.CallbackQuery, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏"""
    if not user or not user.is_registered:
        await callback.answer("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
        return
    
    settings_text = "üîí <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏</b>\n\n"
    settings_text += "üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å:</b>\n"
    settings_text += "‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–º—è: ‚úÖ –î–∞\n"
    settings_text += "‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å email: ‚ùå –ù–µ—Ç\n"
    settings_text += "‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω: ‚ùå –ù–µ—Ç\n\n"
    settings_text += "üìä <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>\n"
    settings_text += "‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥: ‚úÖ –î–∞\n"
    settings_text += "‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: ‚úÖ –î–∞\n"
    settings_text += "‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å: ‚ùå –ù–µ—Ç"
    
    from ..utils.message_utils import safe_edit_message
    
    success = await safe_edit_message(
        message=callback.message,
        text=settings_text,
        reply_markup=get_settings_menu_keyboard(),
        parse_mode="HTML"
    )
    
    if not success:
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", show_alert=True)

@router.callback_query(F.data == "payment_settings")
async def show_payment_settings(callback: types.CallbackQuery, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π"""
    if not user or not user.is_registered:
        await callback.answer("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
        return
    
    settings_text = "üí∞ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π</b>\n\n"
    settings_text += "üí≥ <b>–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:</b>\n"
    settings_text += "‚Ä¢ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞: ‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞\n"
    settings_text += "‚Ä¢ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏: ‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ\n"
    settings_text += "‚Ä¢ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞: ‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ\n\n"
    settings_text += "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
    settings_text += f"‚Ä¢ –û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: {user.total_earnings or 0} ‚ÇΩ\n"
    settings_text += "‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Å–¥–µ–ª–æ–∫: 0\n"
    settings_text += "‚Ä¢ –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: 0.0"
    
    from ..utils.message_utils import safe_edit_message
    
    success = await safe_edit_message(
        message=callback.message,
        text=settings_text,
        reply_markup=get_settings_menu_keyboard(),
        parse_mode="HTML"
    )
    
    if not success:
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", show_alert=True)

@router.callback_query(F.data == "telegram_settings")
async def show_telegram_settings(callback: types.CallbackQuery, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram"""
    if not user or not user.is_registered:
        await callback.answer("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
        return
    
    settings_text = "üì± <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram</b>\n\n"
    settings_text += f"üÜî <b>Telegram ID:</b> {user.telegram_id}\n"
    settings_text += f"üë§ <b>Username:</b> @{user.telegram_username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
    settings_text += f"üîó <b>–ü—Ä–∏–≤—è–∑–∫–∞:</b> ‚úÖ –ê–∫—Ç–∏–≤–Ω–∞\n\n"
    settings_text += "üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n"
    settings_text += "‚Ä¢ –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã: ‚úÖ –í–∫–ª—é—á–µ–Ω—ã\n"
    settings_text += "‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è: ‚úÖ –í–∫–ª—é—á–µ–Ω—ã\n"
    settings_text += "‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ã–µ: ‚úÖ –í–∫–ª—é—á–µ–Ω—ã\n"
    settings_text += "‚Ä¢ –†–µ–∫–ª–∞–º–∞: ‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã"
    
    from ..utils.message_utils import safe_edit_message
    
    success = await safe_edit_message(
        message=callback.message,
        text=settings_text,
        reply_markup=get_settings_menu_keyboard(),
        parse_mode="HTML"
    )
    
    if not success:
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", show_alert=True)

@router.callback_query(F.data == "my_reviews")
async def my_reviews_handler(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –æ—Ç–∑—ã–≤—ã"
    """
    reviews_text = (
        "‚≠ê <b>–ú–æ–∏ –æ—Ç–∑—ã–≤—ã</b>\n\n"
        "üìù <b>–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã:</b>\n"
        "‚Ä¢ –û—Ç @alex_dev: \"–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ë—ã—Å—Ç—Ä–æ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ\" ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê\n"
        "‚Ä¢ –û—Ç @maria_design: \"–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥\" ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê\n"
        "‚Ä¢ –û—Ç @ivan_copy: \"–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ\" ‚≠ê‚≠ê‚≠ê‚≠ê\n\n"
        "üìù <b>–û—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã:</b>\n"
        "‚Ä¢ –î–ª—è @dmitry_web: \"–•–æ—Ä–æ—à–∏–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å\" ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê\n"
        "‚Ä¢ –î–ª—è @elena_ui: \"–†–µ–∫–æ–º–µ–Ω–¥—É—é\" ‚≠ê‚≠ê‚≠ê‚≠ê\n\n"
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤:</b>\n"
        "‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: 4.6 ‚≠ê\n"
        "‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: 8\n"
        "‚Ä¢ –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö: 7\n"
        "‚Ä¢ –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö: 1\n"
        "‚Ä¢ –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö: 0\n\n"
        "üí° <b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –æ—Ç–∑—ã–≤–æ–≤:</b>\n"
        "‚Ä¢ –í—ã–ø–æ–ª–Ω—è–π—Ç–µ —Ä–∞–±–æ—Ç—É –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ\n"
        "‚Ä¢ –°–æ–±–ª—é–¥–∞–π—Ç–µ –¥–µ–¥–ª–∞–π–Ω—ã\n"
        "‚Ä¢ –û–±—â–∞–π—Ç–µ—Å—å —Å –∑–∞–∫–∞–∑—á–∏–∫–∞–º–∏\n"
        "‚Ä¢ –ü—Ä–æ—Å–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è\n\n"
        "üåê <a href='http://localhost:3000/profile/reviews'>–ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ —Å–∞–π—Ç–µ</a>"
    )
    
    await callback.message.edit_text(
        reviews_text,
        reply_markup=get_profile_keyboard(),
        parse_mode="HTML",
        disable_web_page_preview=True
    )
    await callback.answer() 