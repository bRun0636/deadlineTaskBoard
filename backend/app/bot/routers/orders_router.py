import logging
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest

from ..services.user_service import UserService
from ..services.order_service import OrderService
from ..keyboards.order_keyboards import get_orders_menu_keyboard
from app.models.user import User

router = Router(name="orders_router")
logger = logging.getLogger(__name__)

@router.message(Command("orders"))
async def show_orders_menu(message: types.Message, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∑–∞–∫–∞–∑–æ–≤"""
    if not user or not user.is_registered:
        await message.answer(
            "‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
        return
    
    await message.answer(
        "üìä <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_orders_menu_keyboard(),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "orders")
async def show_orders(callback: types.CallbackQuery, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã"""
    if not user or not user.is_registered:
        await callback.answer("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
        return
    
    try:
        order_service = OrderService()
        orders = await order_service.get_user_orders(user.id)
        
        if not orders:
            await callback.message.edit_text(
                "üìä <b>–ó–∞–∫–∞–∑—ã</b>\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑!",
                reply_markup=get_orders_menu_keyboard(),
                parse_mode="HTML"
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
        orders_text = "üìä <b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:</b>\n\n"
        for i, order in enumerate(orders[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            status_emoji = {
                'open': 'üü¢',
                'in_progress': 'üü°',
                'completed': '‚úÖ',
                'cancelled': '‚ùå'
            }.get(order.status, 'üìù')
            
            orders_text += (
                f"{i}. {status_emoji} <b>{order.title}</b>\n"
                f"   –°—Ç–∞—Ç—É—Å: {order.status}\n"
                f"   –ë—é–¥–∂–µ—Ç: {order.budget or '–ù–µ —É–∫–∞–∑–∞–Ω'} ‚ÇΩ\n"
                f"   –°–æ–∑–¥–∞–Ω: {order.created_at.strftime('%d.%m.%Y')}\n\n"
            )
        
        if len(orders) > 10:
            orders_text += f"... –∏ –µ—â–µ {len(orders) - 10} –∑–∞–∫–∞–∑–æ–≤"
        
        try:
            await callback.message.edit_text(
                orders_text,
                reply_markup=get_orders_menu_keyboard(),
                parse_mode="HTML"
            )
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                pass
            else:
                raise
        
    except Exception as e:
        logger.error(f"Error showing orders for user {user.id}: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤.",
            reply_markup=get_orders_menu_keyboard()
        ) 