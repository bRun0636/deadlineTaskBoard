import logging
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest

from ..keyboards.main_keyboards import (
    get_main_menu_keyboard, get_orders_menu_keyboard,
    get_order_actions_keyboard, get_confirmation_keyboard
)
from ..services.user_service import UserService
from ..services.order_service import OrderService
from app.models.user import User
from app.models.order import OrderStatus
from app.models.proposal import ProposalStatus

router = Router(name="orders_router")
logger = logging.getLogger(__name__)

@router.message(Command("orders"))
async def show_orders_menu(message: types.Message, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∑–∞–∫–∞–∑–æ–≤"""
    if not user or not user.is_registered:
        await message.answer(
            "‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
        return
    
    await message.answer(
        "üìä <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_orders_menu_keyboard(),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "orders")
async def show_orders_menu_handler(callback: types.CallbackQuery, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∑–∞–∫–∞–∑–æ–≤"""
    if not user or not user.is_registered:
        await callback.answer("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üìä <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_orders_menu_keyboard(),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "my_orders")
async def show_my_orders(callback: types.CallbackQuery, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∑–∞–∫–∞–∑—ã"""
    if not user or not user.is_registered:
        await callback.answer("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
        from ..services.order_service import OrderService
        order_service = OrderService()
        orders = await order_service.get_user_orders(user.id)
        
        if not orders:
            orders_text = "üì¶ <b>–ú–æ–∏ –∑–∞–∫–∞–∑—ã:</b>\n\n"
            orders_text += "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.\n"
            orders_text += "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É!"
        else:
            orders_text = f"üì¶ <b>–ú–æ–∏ –∑–∞–∫–∞–∑—ã ({len(orders)}):</b>\n\n"
            
            for i, order in enumerate(orders, 1):
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —ç–º–æ–¥–∑–∏
                status_emoji = {
                    OrderStatus.OPEN: 'üü¢',
                    OrderStatus.IN_PROGRESS: 'üü°', 
                    OrderStatus.COMPLETED: '‚úÖ',
                    OrderStatus.CANCELLED: '‚ùå'
                }.get(order.status, '‚ùì')
                
                status_text = {
                    OrderStatus.OPEN: '–û—Ç–∫—Ä—ã—Ç',
                    OrderStatus.IN_PROGRESS: '–í —Ä–∞–±–æ—Ç–µ',
                    OrderStatus.COMPLETED: '–ó–∞–≤–µ—Ä—à–µ–Ω', 
                    OrderStatus.CANCELLED: '–û—Ç–º–µ–Ω–µ–Ω'
                }.get(order.status, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                created_date = order.created_at.strftime("%d.%m.%Y") if order.created_at else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –±—é–¥–∂–µ—Ç
                budget_text = f"{order.budget:,.0f} ‚ÇΩ" if order.budget else "–ù–µ —É–∫–∞–∑–∞–Ω"
                
                orders_text += f"{i}. {status_emoji} <b>{order.title}</b>\n"
                orders_text += f"   –ë—é–¥–∂–µ—Ç: {budget_text}\n"
                orders_text += f"   –°—Ç–∞—Ç—É—Å: {status_text}\n"
                orders_text += f"   –°–æ–∑–¥–∞–Ω: {created_date}\n\n"
        
        from ..utils.message_utils import safe_edit_message
        
        success = await safe_edit_message(
            message=callback.message,
            text=orders_text,
            reply_markup=get_orders_menu_keyboard(),
            parse_mode="HTML"
        )
        
        if not success:
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", show_alert=True)
            
    except Exception as e:
        logger.error(f"Error showing user orders: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤", show_alert=True)

@router.callback_query(F.data == "available_orders")
async def show_available_orders(callback: types.CallbackQuery, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã"""
    if not user or not user.is_registered:
        await callback.answer("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
        from ..services.order_service import OrderService
        order_service = OrderService()
        orders = await order_service.get_available_orders()
        
        if not orders:
            orders_text = "üîç <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã:</b>\n\n"
            orders_text += "üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.\n"
            orders_text += "–ó–∞–∫–∞–∑—ã –ø–æ—è–≤—è—Ç—Å—è, –∫–æ–≥–¥–∞ –∑–∞–∫–∞–∑—á–∏–∫–∏ –∏—Ö —Å–æ–∑–¥–∞–¥—É—Ç."
        else:
            orders_text = f"üîç <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã ({len(orders)}):</b>\n\n"
            
            for i, order in enumerate(orders, 1):
                # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∑–∞–∫–∞–∑—á–∏–∫–∞
                creator_name = order.creator.display_name if order.creator else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                created_date = order.created_at.strftime("%d.%m.%Y") if order.created_at else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –±—é–¥–∂–µ—Ç
                budget_text = f"{order.budget:,.0f} ‚ÇΩ" if order.budget else "–ù–µ —É–∫–∞–∑–∞–Ω"
                
                orders_text += f"{i}. <b>{order.title}</b>\n"
                orders_text += f"   –ë—é–¥–∂–µ—Ç: {budget_text}\n"
                orders_text += f"   –ó–∞–∫–∞–∑—á–∏–∫: {creator_name}\n"
                orders_text += f"   –°–æ–∑–¥–∞–Ω: {created_date}\n\n"
        
        from ..utils.message_utils import safe_edit_message
        
        success = await safe_edit_message(
            message=callback.message,
            text=orders_text,
            reply_markup=get_orders_menu_keyboard(),
            parse_mode="HTML"
        )
        
        if not success:
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", show_alert=True)
            
    except Exception as e:
        logger.error(f"Error showing available orders: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤", show_alert=True)

@router.callback_query(F.data == "create_order")
async def create_order_handler(callback: types.CallbackQuery, user: User):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    if not user or not user.is_registered:
        await callback.answer("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user.role != 'customer' and user.role != 'admin':
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—á–∏–∫–∏ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã!", show_alert=True)
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –∑–∞–∫–∞–∑–∞
    order_text = (
        "‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞</b>\n\n"
        "üí° <b>–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑:</b>\n"
        "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç: deadline-task-board.com\n"
        "2. –í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç\n"
        "3. –ù–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑'\n"
        "4. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É:\n"
        "   ‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞\n"
        "   ‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã\n"
        "   ‚Ä¢ –ë—é–¥–∂–µ—Ç\n"
        "   ‚Ä¢ –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n"
        "   ‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è\n"
        "5. –ù–∞–∂–º–∏—Ç–µ '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å'\n\n"
        "üìã <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∑–∞–∫–∞–∑—É:</b>\n"
        "‚Ä¢ –ß–µ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏\n"
        "‚Ä¢ –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –±—é–¥–∂–µ—Ç\n"
        "‚Ä¢ –î–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Å—Ä–æ–∫\n"
        "‚Ä¢ –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)\n\n"
        "üåê <b>–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ —Å–∞–π—Ç–µ</b>\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–≤–µ—Ä—Å–∏—é –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤."
    )
    
    from ..utils.message_utils import safe_edit_message
    
    success = await safe_edit_message(
        message=callback.message,
        text=order_text,
        reply_markup=get_orders_menu_keyboard(),
        parse_mode="HTML"
    )
    
    if not success:
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", show_alert=True)

@router.callback_query(F.data == "my_proposals")
async def show_my_proposals(callback: types.CallbackQuery, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    if not user or not user.is_registered:
        await callback.answer("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
        from ..services.order_service import OrderService
        order_service = OrderService()
        proposals = await order_service.get_user_proposals(user.id)
        
        if not proposals:
            proposals_text = "üíº <b>–ú–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:</b>\n\n"
            proposals_text += "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.\n"
            proposals_text += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º –∑–∞–∫–∞–∑–∞–º!"
        else:
            proposals_text = f"üíº <b>–ú–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ({len(proposals)}):</b>\n\n"
            
            for i, proposal in enumerate(proposals, 1):
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —ç–º–æ–¥–∑–∏
                status_emoji = {
                    'pending': '‚è≥',
                    'accepted': '‚úÖ',
                    'rejected': '‚ùå',
                    'withdrawn': 'üîÑ'
                }.get(proposal.status, '‚ùì')
                
                status_text = {
                    'pending': '–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏',
                    'accepted': '–ü—Ä–∏–Ω—è—Ç–æ',
                    'rejected': '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ',
                    'withdrawn': '–û—Ç–æ–∑–≤–∞–Ω–æ'
                }.get(proposal.status, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                created_date = proposal.created_at.strftime("%d.%m.%Y") if proposal.created_at else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É
                price_text = f"{proposal.price:,.0f} ‚ÇΩ" if proposal.price else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
                order_title = proposal.order.title if proposal.order else "–ó–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω"
                
                proposals_text += f"{i}. {status_emoji} <b>{order_title}</b>\n"
                proposals_text += f"   –ú–æ—è —Ü–µ–Ω–∞: {price_text}\n"
                proposals_text += f"   –°—Ç–∞—Ç—É—Å: {status_text}\n"
                proposals_text += f"   –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {created_date}\n\n"
        
        from ..utils.message_utils import safe_edit_message
        
        success = await safe_edit_message(
            message=callback.message,
            text=proposals_text,
            reply_markup=get_orders_menu_keyboard(),
            parse_mode="HTML"
        )
        
        if not success:
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", show_alert=True)
            
    except Exception as e:
        logger.error(f"Error showing user proposals: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π", show_alert=True)

@router.callback_query(F.data == "order_statistics")
async def show_order_statistics(callback: types.CallbackQuery, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫–∞–∑–æ–≤"""
    if not user or not user.is_registered:
        await callback.answer("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
        from ..services.order_service import OrderService
        order_service = OrderService()
        stats = await order_service.get_order_statistics(user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        orders = await order_service.get_user_orders(user.id)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        status_counts = {}
        for order in orders:
            status = order.status
            status_counts[status] = status_counts.get(status, 0) + 1
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats_text = "üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤</b>\n\n"
        stats_text += f"üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {stats['total_orders']}\n"
        stats_text += f"üíº –í—Å–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {stats['total_proposals']}\n"
        stats_text += f"‚úÖ –ü—Ä–∏–Ω—è—Ç—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {stats['accepted_proposals']}\n"
        stats_text += f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {stats['rejected_proposals']}\n"
        stats_text += f"üí∞ –û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: {stats['total_earnings']:,.0f} ‚ÇΩ\n\n"
        
        if status_counts:
            stats_text += "üìä <b>–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º –∑–∞–∫–∞–∑–æ–≤:</b>\n"
            status_names = {
                'open': '–û—Ç–∫—Ä—ã—Ç—ã–µ',
                'in_progress': '–í —Ä–∞–±–æ—Ç–µ',
                'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ',
                'cancelled': '–û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ'
            }
            
            for status, count in status_counts.items():
                status_name = status_names.get(status, status)
                stats_text += f"‚Ä¢ {status_name}: {count} –∑–∞–∫–∞–∑(–æ–≤)\n"
        else:
            stats_text += "üìä <b>–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º –∑–∞–∫–∞–∑–æ–≤:</b>\n"
            stats_text += "‚Ä¢ –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤\n"
        
        # –í—ã—á–∏—Å–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        if stats['total_proposals'] > 0:
            acceptance_rate = (stats['accepted_proposals'] / stats['total_proposals']) * 100
            stats_text += f"\nüìà <b>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>\n"
            stats_text += f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {acceptance_rate:.1f}%\n"
        
        if stats['total_orders'] > 0:
            avg_budget = sum(order.budget for order in orders if order.budget) / len([o for o in orders if o.budget])
            stats_text += f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞: {avg_budget:,.0f} ‚ÇΩ\n"
        
        from ..utils.message_utils import safe_edit_message
        
        success = await safe_edit_message(
            message=callback.message,
            text=stats_text,
            reply_markup=get_orders_menu_keyboard(),
            parse_mode="HTML"
        )
        
        if not success:
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", show_alert=True)
            
    except Exception as e:
        logger.error(f"Error showing order statistics: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)

@router.callback_query(F.data == "back_to_orders")
async def back_to_orders_menu(callback: types.CallbackQuery, user: User):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –∑–∞–∫–∞–∑–æ–≤"""
    if not user or not user.is_registered:
        await callback.answer("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üìä <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_orders_menu_keyboard(),
        parse_mode="HTML"
    )


@router.callback_query(F.data.startswith("edit_order_"))
async def edit_order_handler(callback: types.CallbackQuery, user: User):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    if not user or not user.is_registered:
        await callback.answer("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
        return
    
    try:
        order_id = int(callback.data.replace("edit_order_", ""))
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
        from ..services.order_service import OrderService
        order_service = OrderService()
        order = await order_service.get_order_by_id(order_id)
        
        if not order:
            await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        if order.creator_id != user.id and user.role != UserRole.ADMIN:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞!", show_alert=True)
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        edit_text = (
            "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>\n\n"
            f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {order.title}\n"
            f"üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {order.description[:100]}...\n"
            f"üí∞ <b>–ë—é–¥–∂–µ—Ç:</b> {order.budget:,} ‚ÇΩ\n"
            f"üìÖ <b>–°—Ä–æ–∫:</b> {order.deadline.strftime('%d.%m.%Y')}\n"
            f"üè∑Ô∏è <b>–°—Ç–∞—Ç—É—Å:</b> {order.status}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
        )
        
        from ..keyboards.order_keyboards import get_order_edit_keyboard
        await callback.message.edit_text(
            edit_text,
            reply_markup=get_order_edit_keyboard(order_id),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error editing order: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞", show_alert=True)


@router.callback_query(F.data.startswith("delete_order_"))
async def delete_order_handler(callback: types.CallbackQuery, user: User):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    if not user or not user.is_registered:
        await callback.answer("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
        return
    
    try:
        order_id = int(callback.data.replace("delete_order_", ""))
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
        from ..services.order_service import OrderService
        order_service = OrderService()
        order = await order_service.get_order_by_id(order_id)
        
        if not order:
            await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
        if order.creator_id != user.id and user.role != UserRole.ADMIN:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞!", show_alert=True)
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        confirm_text = (
            "üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>\n\n"
            f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {order.title}\n"
            f"üí∞ <b>–ë—é–¥–∂–µ—Ç:</b> {order.budget:,} ‚ÇΩ\n\n"
            "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.\n"
            "–í—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫ –∑–∞–∫–∞–∑—É —Ç–∞–∫–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.\n\n"
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∑–∞–∫–∞–∑?"
        )
        
        from ..keyboards.order_keyboards import get_confirmation_keyboard
        await callback.message.edit_text(
            confirm_text,
            reply_markup=get_confirmation_keyboard("delete_order", order_id),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error deleting order: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞", show_alert=True)


@router.callback_query(F.data.startswith("confirm_delete_order_"))
async def confirm_delete_order_handler(callback: types.CallbackQuery, user: User):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    if not user or not user.is_registered:
        await callback.answer("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
        return
    
    try:
        order_id = int(callback.data.replace("confirm_delete_order_", ""))
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑
        from ..services.order_service import OrderService
        order_service = OrderService()
        success = await order_service.delete_order(order_id, user.id)
        
        if success:
            await callback.message.edit_text(
                "‚úÖ <b>–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!</b>\n\n"
                "–ó–∞–∫–∞–∑ –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã.",
                reply_markup=get_orders_menu_keyboard(),
                parse_mode="HTML"
            )
        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑", show_alert=True)
        
    except Exception as e:
        logger.error(f"Error confirming delete order: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞", show_alert=True)


@router.callback_query(F.data.startswith("complete_order_"))
async def complete_order_handler(callback: types.CallbackQuery, user: User):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    if not user or not user.is_registered:
        await callback.answer("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
        return
    
    try:
        order_id = int(callback.data.replace("complete_order_", ""))
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
        from ..services.order_service import OrderService
        order_service = OrderService()
        order = await order_service.get_order_by_id(order_id)
        
        if not order:
            await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        if order.creator_id != user.id and user.role != UserRole.ADMIN:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞!", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—Ç–µ
        if order.status != "in_progress":
            await callback.answer("‚ùå –ú–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—ã –≤ —Ä–∞–±–æ—Ç–µ!", show_alert=True)
            return
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–∫–∞–∑
        success = await order_service.complete_order(order_id, user.id)
        
        if success:
            await callback.message.edit_text(
                "‚úÖ <b>–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
                f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {order.title}\n"
                f"üí∞ <b>–ë—é–¥–∂–µ—Ç:</b> {order.budget:,} ‚ÇΩ\n\n"
                "–ó–∞–∫–∞–∑ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å '–ó–∞–≤–µ—Ä—à–µ–Ω'.",
                reply_markup=get_orders_menu_keyboard(),
                parse_mode="HTML"
            )
        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑", show_alert=True)
        
    except Exception as e:
        logger.error(f"Error completing order: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞", show_alert=True)


@router.callback_query(F.data.startswith("order_proposals_"))
async def show_order_proposals_handler(callback: types.CallbackQuery, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫ –∑–∞–∫–∞–∑—É"""
    if not user or not user.is_registered:
        await callback.answer("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
        return
    
    try:
        order_id = int(callback.data.replace("order_proposals_", ""))
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        from ..services.order_service import OrderService
        order_service = OrderService()
        order = await order_service.get_order_by_id(order_id)
        proposals = await order_service.get_order_proposals(order_id)
        
        if not order:
            await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        if order.creator_id != user.id and user.role != UserRole.ADMIN:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É!", show_alert=True)
            return
        
        if not proposals:
            await callback.message.edit_text(
                "üìã <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫ –∑–∞–∫–∞–∑—É</b>\n\n"
                f"üìù <b>–ó–∞–∫–∞–∑:</b> {order.title}\n\n"
                "üíº <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:</b>\n"
                "–ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É.\n\n"
                "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –º–æ–≥—É—Ç –æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –æ—Ç–∫—Ä—ã—Ç.",
                reply_markup=get_orders_menu_keyboard(),
                parse_mode="HTML"
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        proposals_text = (
            "üìã <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫ –∑–∞–∫–∞–∑—É</b>\n\n"
            f"üìù <b>–ó–∞–∫–∞–∑:</b> {order.title}\n"
            f"üí∞ <b>–ë—é–¥–∂–µ—Ç:</b> {order.budget:,} ‚ÇΩ\n\n"
            f"üíº <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ({len(proposals)}):</b>\n\n"
        )
        
        for i, proposal in enumerate(proposals[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            executor_name = proposal.executor.full_name or proposal.executor.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            proposals_text += (
                f"{i}. <b>{executor_name}</b>\n"
                f"   üí∞ –¶–µ–Ω–∞: {proposal.price:,} ‚ÇΩ\n"
                f"   üìÖ –°—Ä–æ–∫: {proposal.deadline.strftime('%d.%m.%Y')}\n"
                f"   üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {proposal.comment[:50]}...\n\n"
            )
        
        if len(proposals) > 10:
            proposals_text += f"... –∏ –µ—â–µ {len(proposals) - 10} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π\n\n"
        
        proposals_text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è."
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏
        from ..keyboards.order_keyboards import get_proposals_keyboard
        await callback.message.edit_text(
            proposals_text,
            reply_markup=get_proposals_keyboard(order_id, proposals),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error showing order proposals: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π", show_alert=True)


@router.callback_query(F.data.startswith("accept_proposal_"))
async def accept_proposal_handler(callback: types.CallbackQuery, user: User):
    """–ü—Ä–∏–Ω—è—Ç–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫ –∑–∞–∫–∞–∑—É"""
    if not user or not user.is_registered:
        await callback.answer("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: accept_proposal_{order_id}_{proposal_id}
        parts = callback.data.split("_")
        order_id = int(parts[2])
        proposal_id = int(parts[3])
        
        # –ü—Ä–∏–Ω–∏–º–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        from ..services.order_service import OrderService
        order_service = OrderService()
        success = await order_service.accept_proposal(proposal_id, user.id)
        
        if success:
            await callback.answer("‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ! –ó–∞–∫–∞–∑ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Ä–∞–±–æ—Ç—É.", show_alert=True)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤
            await callback.message.edit_text(
                "‚úÖ <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!</b>\n\n"
                "–ó–∞–∫–∞–∑ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å '–í —Ä–∞–±–æ—Ç–µ'.\n"
                "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.",
                reply_markup=get_orders_menu_keyboard(),
                parse_mode="HTML"
            )
        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", show_alert=True)
        
    except Exception as e:
        logger.error(f"Error accepting proposal: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", show_alert=True)


@router.callback_query(F.data.startswith("reject_proposal_"))
async def reject_proposal_handler(callback: types.CallbackQuery, user: User):
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫ –∑–∞–∫–∞–∑—É"""
    if not user or not user.is_registered:
        await callback.answer("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: reject_proposal_{order_id}_{proposal_id}
        parts = callback.data.split("_")
        order_id = int(parts[2])
        proposal_id = int(parts[3])
        
        # –û—Ç–∫–ª–æ–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        from ..services.order_service import OrderService
        order_service = OrderService()
        success = await order_service.reject_proposal(proposal_id, user.id)
        
        if success:
            await callback.answer("‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ", show_alert=True)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
            await show_order_proposals_handler(callback, user)
        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", show_alert=True)
        
    except Exception as e:
        logger.error(f"Error rejecting proposal: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", show_alert=True) 