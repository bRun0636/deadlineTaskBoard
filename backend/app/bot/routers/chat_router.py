import logging
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command

from ..keyboards.main_keyboards import (
    get_main_menu_keyboard, get_messages_menu_keyboard
)
from ..services.user_service import UserService
from ..services.chat_service import ChatService
from app.models.user import User

router = Router(name="chat_router")
logger = logging.getLogger(__name__)

@router.message(Command("chat"))
async def show_chat_menu(message: types.Message, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —á–∞—Ç–æ–≤"""
    if not user or not user.is_registered:
        await message.answer(
            "‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç–∞–º–∏.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
        return
    
    await message.answer(
        "üí¨ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_messages_menu_keyboard(),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "messages")
async def show_messages_menu_handler(callback: types.CallbackQuery, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not user or not user.is_registered:
        await callback.answer("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üí¨ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_messages_menu_keyboard(),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "my_chats")
async def show_my_chats(callback: types.CallbackQuery, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ —á–∞—Ç—ã"""
    if not user or not user.is_registered:
        await callback.answer("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —á–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from ..services.chat_service import ChatService
    chat_service = ChatService()
    chats = await chat_service.get_user_chats(user.id)
    
    if not chats:
        chats_text = "üí¨ <b>–ú–æ–∏ —á–∞—Ç—ã:</b>\n\n"
        chats_text += "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤.\n\n"
        chats_text += "üí° <b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ:</b>\n"
        chats_text += "‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –∑–∞–∫–∞–∑ –∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π\n"
        chats_text += "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫–∞–∑\n"
        chats_text += "‚Ä¢ –ü–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —á–∞—Ç —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω\n\n"
        chats_text += "üåê <a href='http://localhost:3000/orders'>–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–∫–∞–∑–∞–º</a>"
    else:
        chats_text = "üí¨ <b>–ú–æ–∏ —á–∞—Ç—ã:</b>\n\n"
        for i, chat in enumerate(chats[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —á–∞—Ç–æ–≤
            chats_text += f"{i}. <b>{chat.get('order_title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>\n"
            participants = chat.get('participants', [])
            chats_text += f"   –£—á–∞—Å—Ç–Ω–∏–∫–∏: {len(participants)} —á–µ–ª.\n"
            if chat.get('last_message_time'):
                chats_text += f"   –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {chat['last_message_time'].strftime('%d.%m.%Y %H:%M')}\n"
            chats_text += "\n"
    
    from ..utils.message_utils import safe_edit_message
    
    success = await safe_edit_message(
        message=callback.message,
        text=chats_text,
        reply_markup=get_messages_menu_keyboard(),
        parse_mode="HTML"
    )
    
    if not success:
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", show_alert=True)

@router.callback_query(F.data == "new_messages")
async def show_new_messages(callback: types.CallbackQuery, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if not user or not user.is_registered:
        await callback.answer("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from ..services.chat_service import ChatService
    chat_service = ChatService()
    new_messages = await chat_service.get_new_messages(user.id)
    
    if not new_messages:
        messages_text = "üì® <b>–ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n\n"
        messages_text += "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.\n\n"
        messages_text += "üí° <b>–°–æ–æ–±—â–µ–Ω–∏—è –ø–æ—è–≤—è—Ç—Å—è –∫–æ–≥–¥–∞:</b>\n"
        messages_text += "‚Ä¢ –ö—Ç–æ-—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –≤–∞—à –∑–∞–∫–∞–∑\n"
        messages_text += "‚Ä¢ –ó–∞–∫–∞–∑—á–∏–∫ –ø—Ä–∏–º–µ—Ç –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ\n"
        messages_text += "‚Ä¢ –ù–∞—á–Ω–µ—Ç—Å—è –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –ø–æ –∑–∞–∫–∞–∑—É\n\n"
        messages_text += "üåê <a href='http://localhost:3000/orders'>–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–∫–∞–∑–∞–º</a>"
    else:
        messages_text = "üì® <b>–ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n\n"
        for i, msg in enumerate(new_messages[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
            sender_name = msg.sender.display_name if msg.sender else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            messages_text += f"{i}. <b>–û—Ç: {sender_name}</b>\n"
            messages_text += f"   {msg.content[:50]}{'...' if len(msg.content) > 50 else ''}\n"
            messages_text += f"   {msg.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
    
    from ..utils.message_utils import safe_edit_message
    
    success = await safe_edit_message(
        message=callback.message,
        text=messages_text,
        reply_markup=get_messages_menu_keyboard(),
        parse_mode="HTML"
    )
    
    if not success:
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", show_alert=True)

@router.callback_query(F.data == "send_message")
async def send_message_handler(callback: types.CallbackQuery, user: User):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if not user or not user.is_registered:
        await callback.answer("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    message_text = (
        "üì§ <b>–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è</b>\n\n"
        "üí° <b>–ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n"
        "1. –ù–∞–π–¥–∏—Ç–µ –∑–∞–∫–∞–∑, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –æ–±—â–∞—Ç—å—Å—è\n"
        "2. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞–∫–∞–∑, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –µ–≥–æ\n"
        "3. –í —Ä–∞–∑–¥–µ–ª–µ —á–∞—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "4. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'\n\n"
        "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã:</b>\n"
        "‚Ä¢ –ó–∞–∫–∞–∑—ã, –≥–¥–µ –≤—ã –∑–∞–∫–∞–∑—á–∏–∫\n"
        "‚Ä¢ –ó–∞–∫–∞–∑—ã, –≥–¥–µ –≤—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å\n"
        "‚Ä¢ –ó–∞–∫–∞–∑—ã –≤ —Å—Ç–∞—Ç—É—Å–µ '–í —Ä–∞–±–æ—Ç–µ' –∏–ª–∏ '–ó–∞–≤–µ—Ä—à–µ–Ω'\n\n"
        "üåê <b>–¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ —Å–∞–π—Ç–µ:</b>\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–≤–µ—Ä—Å–∏—é –¥–ª—è –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è."
    )
    
    from ..utils.message_utils import safe_edit_message
    
    success = await safe_edit_message(
        message=callback.message,
        text=message_text,
        reply_markup=get_messages_menu_keyboard(),
        parse_mode="HTML"
    )
    
    if not success:
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", show_alert=True)

@router.callback_query(F.data == "message_history")
async def show_message_history(callback: types.CallbackQuery, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not user or not user.is_registered:
        await callback.answer("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from ..services.chat_service import ChatService
    chat_service = ChatService()
    message_history = await chat_service.get_message_history(user.id)
    
    if not message_history:
        messages_text = "üìã <b>–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:</b>\n\n"
        messages_text += "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.\n\n"
        messages_text += "üí° <b>–°–æ–æ–±—â–µ–Ω–∏—è –ø–æ—è–≤—è—Ç—Å—è –∫–æ–≥–¥–∞:</b>\n"
        messages_text += "‚Ä¢ –í—ã –Ω–∞—á–Ω–µ—Ç–µ –æ–±—â–µ–Ω–∏–µ –ø–æ –∑–∞–∫–∞–∑—É\n"
        messages_text += "‚Ä¢ –ö—Ç–æ-—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        messages_text += "‚Ä¢ –ó–∞–∫–∞–∑—á–∏–∫ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–∞—á–Ω—É—Ç –æ–±—Å—É–∂–¥–µ–Ω–∏–µ\n\n"
        messages_text += "üåê <a href='http://localhost:3000/orders'>–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–∫–∞–∑–∞–º</a>"
    else:
        messages_text = "üìã <b>–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:</b>\n\n"
        for i, msg in enumerate(message_history[:15], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 —Å–æ–æ–±—â–µ–Ω–∏–π
            direction = "üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" if msg.sender_id == user.id else "üì• –ü–æ–ª—É—á–µ–Ω–æ"
            sender_name = msg.sender.display_name if msg.sender else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            messages_text += f"{i}. {direction} <b>{sender_name}</b>\n"
            messages_text += f"   {msg.content[:60]}{'...' if len(msg.content) > 60 else ''}\n"
            messages_text += f"   {msg.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
    
    from ..utils.message_utils import safe_edit_message
    
    success = await safe_edit_message(
        message=callback.message,
        text=messages_text,
        reply_markup=get_messages_menu_keyboard(),
        parse_mode="HTML"
    )
    
    if not success:
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", show_alert=True) 