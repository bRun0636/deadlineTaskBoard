import logging
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from ..keyboards.chat_keyboards import get_chat_menu_keyboard, get_chat_keyboard
from ..services.chat_service import ChatService
from ..services.user_service import UserService
from app.models.user import User

router = Router(name="chat_router")
logger = logging.getLogger(__name__)


class ChatStates(StatesGroup):
    waiting_for_message = State()


@router.callback_query(F.data == "chat")
async def chat_menu_handler(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é —á–∞—Ç–æ–≤
    """
    user_service = UserService()
    user = await user_service.get_user_by_telegram_id(callback.from_user.id)
    
    if not user or not user.is_registered:
        await callback.message.edit_text(
            "‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.\n\n"
            "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç–∞–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç–µ.\n"
            "üåê <a href='http://localhost:3000/register'>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</a>",
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        await callback.answer()
        return
    
    await callback.message.edit_text(
        "üí¨ <b>–ß–∞—Ç—ã</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_chat_menu_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "my_chats")
async def my_chats_handler(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–∏—Ö —á–∞—Ç–æ–≤
    """
    user_service = UserService()
    chat_service = ChatService()
    
    user = await user_service.get_user_by_telegram_id(callback.from_user.id)
    chats = await chat_service.get_user_chats(user.id)
    
    if not chats:
        await callback.message.edit_text(
            "üí¨ <b>–ú–æ–∏ —á–∞—Ç—ã</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤.\n\n"
            "üåê <a href='http://localhost:3000/chat'>–ß–∞—Ç—ã –Ω–∞ —Å–∞–π—Ç–µ</a>",
            reply_markup=get_chat_menu_keyboard(),
            parse_mode="HTML",
            disable_web_page_preview=True
        )
    else:
        chats_text = "üí¨ <b>–ú–æ–∏ —á–∞—Ç—ã</b>\n\n"
        for i, chat in enumerate(chats[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —á–∞—Ç–æ–≤
            chats_text += (
                f"{i}. üí¨ <b>{chat.order.title if chat.order else '–ß–∞—Ç'}</b>\n"
                f"   –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {chat.last_message_time.strftime('%d.%m.%Y %H:%M') if chat.last_message_time else '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π'}\n"
                f"   –°–æ–æ–±—â–µ–Ω–∏–π: {chat.message_count if hasattr(chat, 'message_count') else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n"
            )
        
        if len(chats) > 10:
            chats_text += f"... –∏ –µ—â–µ {len(chats) - 10} —á–∞—Ç–æ–≤\n\n"
        
        chats_text += "üåê <a href='http://localhost:3000/chat'>–í—Å–µ —á–∞—Ç—ã –Ω–∞ —Å–∞–π—Ç–µ</a>"
        
        await callback.message.edit_text(
            chats_text,
            reply_markup=get_chat_menu_keyboard(),
            parse_mode="HTML",
            disable_web_page_preview=True
        )
    
    await callback.answer()


@router.callback_query(F.data == "new_message")
async def new_message_handler(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    await callback.message.edit_text(
        "üí¨ <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n"
        "–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç:\n\n"
        "üåê <a href='http://localhost:3000/chat'>–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ</a>\n\n"
        "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /message",
        reply_markup=get_chat_menu_keyboard(),
        parse_mode="HTML",
        disable_web_page_preview=True
    )
    await callback.answer()


@router.message(Command("chat"))
async def chat_command_handler(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /chat
    """
    user_service = UserService()
    chat_service = ChatService()
    
    user = await user_service.get_user_by_telegram_id(message.from_user.id)
    
    if not user or not user.is_registered:
        await message.answer(
            "‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.\n\n"
            "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç–∞–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç–µ.\n"
            "üåê <a href='http://localhost:3000/register'>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</a>",
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        return
    
    chats = await chat_service.get_user_chats(user.id)
    
    if not chats:
        await message.answer(
            "üí¨ <b>–ú–æ–∏ —á–∞—Ç—ã</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤.\n\n"
            "üåê <a href='http://localhost:3000/chat'>–ß–∞—Ç—ã –Ω–∞ —Å–∞–π—Ç–µ</a>",
            parse_mode="HTML",
            disable_web_page_preview=True
        )
    else:
        chats_text = "üí¨ <b>–ú–æ–∏ —á–∞—Ç—ã</b>\n\n"
        for i, chat in enumerate(chats[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —á–∞—Ç–æ–≤
            chats_text += (
                f"{i}. üí¨ <b>{chat.order.title if chat.order else '–ß–∞—Ç'}</b>\n"
                f"   –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {chat.last_message_time.strftime('%d.%m.%Y %H:%M') if chat.last_message_time else '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π'}\n\n"
            )
        
        if len(chats) > 5:
            chats_text += f"... –∏ –µ—â–µ {len(chats) - 5} —á–∞—Ç–æ–≤\n\n"
        
        chats_text += "üåê <a href='http://localhost:3000/chat'>–í—Å–µ —á–∞—Ç—ã –Ω–∞ —Å–∞–π—Ç–µ</a>"
        
        await message.answer(
            chats_text,
            parse_mode="HTML",
            disable_web_page_preview=True
        )


@router.message(Command("message"))
async def message_command_handler(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /message –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    user_service = UserService()
    user = await user_service.get_user_by_telegram_id(message.from_user.id)
    
    if not user or not user.is_registered:
        await message.answer(
            "‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.\n\n"
            "–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç–µ.\n"
            "üåê <a href='http://localhost:3000/register'>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</a>",
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        return
    
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()[1:]
    if len(args) < 2:
        await message.answer(
            "üí¨ <b>–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /message [ID_–∑–∞–∫–∞–∑–∞] [—Ç–µ–∫—Å—Ç_—Å–æ–æ–±—â–µ–Ω–∏—è]\n\n"
            "–ü—Ä–∏–º–µ—Ä: /message 1 –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞ —Å –∑–∞–∫–∞–∑–æ–º?\n\n"
            "üåê <a href='http://localhost:3000/chat'>–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–∞–π—Ç–µ</a>",
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        return
    
    try:
        order_id = int(args[0])
        message_text = " ".join(args[1:])
        
        chat_service = ChatService()
        result = await chat_service.send_message(user.id, order_id, message_text)
        
        if result:
            await message.answer(
                f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∑–∞–∫–∞–∑ #{order_id}\n\n"
                f"üåê <a href='http://localhost:3000/chat/{order_id}'>–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç –Ω–∞ —Å–∞–π—Ç–µ</a>",
                parse_mode="HTML",
                disable_web_page_preview=True
            )
        else:
            await message.answer(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–∫–∞–∑ #{order_id}\n\n"
                f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                f"‚Ä¢ –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω\n"
                f"‚Ä¢ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É\n"
                f"‚Ä¢ –ó–∞–∫–∞–∑ –Ω–µ –≤ —Å—Ç–∞—Ç—É—Å–µ '–≤ —Ä–∞–±–æ—Ç–µ'\n\n"
                f"üåê <a href='http://localhost:3000/chat'>–ß–∞—Ç—ã –Ω–∞ —Å–∞–π—Ç–µ</a>",
                parse_mode="HTML",
                disable_web_page_preview=True
            )
    
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /message [ID_–∑–∞–∫–∞–∑–∞] [—Ç–µ–∫—Å—Ç_—Å–æ–æ–±—â–µ–Ω–∏—è]\n\n"
            "–ü—Ä–∏–º–µ—Ä: /message 1 –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞ —Å –∑–∞–∫–∞–∑–æ–º?",
            parse_mode="HTML"
        ) 


@router.callback_query(F.data.startswith("send_message:"))
async def send_message_handler(callback: types.CallbackQuery, user: User):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"
    """
    if not user or not user.is_registered:
        await callback.answer("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
        return
    
    try:
        chat_id = int(callback.data.split(":")[-1])
        
        send_text = (
            f"üí¨ <b>–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è</b>\n\n"
            f"–ß–∞—Ç ID: {chat_id}\n\n"
            f"üí° <b>–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç:</b>\n"
            f"üåê <a href='http://localhost:3000/chat/{chat_id}'>–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç</a>\n\n"
            f"–¢–∞–º –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "‚Ä¢ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª—ã\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
            "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π"
        )
        
        from ..keyboards.chat_keyboards import get_chat_keyboard
        await callback.message.edit_text(
            send_text,
            reply_markup=get_chat_keyboard(chat_id),
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        
    except Exception as e:
        logger.error(f"Error sending message: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True) 