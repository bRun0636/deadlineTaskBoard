import logging
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta

from ..keyboards.order_keyboards import (
    get_confirmation_keyboard, get_priority_keyboard
)
from ..keyboards.main_keyboards import get_main_menu_keyboard
from ..services.task_service import TaskService
from ..services.user_service import UserService
from app.models.user import User, UserRole
from app.models.task_status import TaskStatus
from ..states.order_states import CreateTaskStates

router = Router(name="task_creation_router")
logger = logging.getLogger(__name__)


@router.callback_query(F.data == "create_task_new")
async def start_create_task(callback: types.CallbackQuery, state: FSMContext, user: User):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
    if not user or not user.is_registered:
        await callback.answer("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
        return
    
    await state.set_state(CreateTaskStates.waiting_for_title)
    
    await callback.message.edit_text(
        "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏</b>\n\n"
        "üìù <b>–®–∞–≥ 1: –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏</b>\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –∏ –ø–æ–Ω—è—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏.\n\n"
        "üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
        "‚Ä¢ –†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å API –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n"
        "‚Ä¢ –°–æ–∑–¥–∞—Ç—å –¥–∏–∑–∞–π–Ω –ª–µ–Ω–¥–∏–Ω–≥–∞\n"
        "‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å —Å—Ç–∞—Ç—å—é –¥–ª—è –±–ª–æ–≥–∞\n\n"
        "üîô –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel",
        parse_mode="HTML"
    )
    await callback.answer()


@router.message(CreateTaskStates.waiting_for_title)
async def process_task_title(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    if len(message.text) < 5:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ! –ú–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    await state.update_data(title=message.text)
    await state.set_state(CreateTaskStates.waiting_for_description)
    
    await message.answer(
        "‚úÖ <b>–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!</b>\n\n"
        "üìù <b>–®–∞–≥ 2: –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏</b>\n\n"
        "–û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:\n\n"
        "üí° <b>–ß—Ç–æ —É–∫–∞–∑–∞—Ç—å:</b>\n"
        "‚Ä¢ –¶–µ–ª—å –∑–∞–¥–∞—á–∏\n"
        "‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è\n"
        "‚Ä¢ –ñ–µ–ª–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n"
        "‚Ä¢ –û—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è\n\n"
        "üîô –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel",
        parse_mode="HTML"
    )


@router.message(CreateTaskStates.waiting_for_description)
async def process_task_description(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    if len(message.text) < 20:
        await message.answer(
            "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ! –ú–∏–Ω–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    await state.update_data(description=message.text)
    await state.set_state(CreateTaskStates.waiting_for_priority)
    
    await message.answer(
        "‚úÖ <b>–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!</b>\n\n"
        "üî¥ <b>–®–∞–≥ 3: –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:",
        reply_markup=get_priority_keyboard(),
        parse_mode="HTML"
    )


@router.callback_query(F.data.startswith("priority_"))
async def process_task_priority(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"""
    priority = callback.data.replace("priority_", "")
    
    # –ú–∞–ø–ø–∏–Ω–≥ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
    priority_mapping = {
        "high": "–í—ã—Å–æ–∫–∏–π",
        "medium": "–°—Ä–µ–¥–Ω–∏–π", 
        "low": "–ù–∏–∑–∫–∏–π"
    }
    
    priority_name = priority_mapping.get(priority, priority)
    await state.update_data(priority=priority)
    
    await state.set_state(CreateTaskStates.waiting_for_deadline)
    
    await callback.message.edit_text(
        f"‚úÖ <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤—ã–±—Ä–∞–Ω: {priority_name}</b>\n\n"
        "üìÖ <b>–®–∞–≥ 4: –°—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</b>\n\n"
        "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):\n\n"
        "üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
        "‚Ä¢ 3 (3 –¥–Ω—è)\n"
        "‚Ä¢ 7 (–Ω–µ–¥–µ–ª—è)\n"
        "‚Ä¢ 14 (2 –Ω–µ–¥–µ–ª–∏)\n\n"
        "üîô –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel",
        parse_mode="HTML"
    )
    await callback.answer()


@router.message(CreateTaskStates.waiting_for_deadline)
async def process_task_deadline(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ä–æ–∫–æ–≤ –∑–∞–¥–∞—á–∏"""
    try:
        days = int(message.text)
        if days < 1:
            await message.answer(
                "‚ùå –°—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0 –¥–Ω–µ–π!\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return
        if days > 365:
            await message.answer(
                "‚ùå –°—Ä–æ–∫ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º—É–º 365 –¥–Ω–µ–π.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return
    except ValueError:
        await message.answer(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ! –ù–∞–ø—Ä–∏–º–µ—Ä: 7\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    deadline = datetime.now() + timedelta(days=days)
    await state.update_data(deadline=deadline)
    await state.set_state(CreateTaskStates.waiting_for_budget)
    
    await message.answer(
        "‚úÖ <b>–°—Ä–æ–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!</b>\n\n"
        "üí∞ <b>–®–∞–≥ 5: –ë—é–¥–∂–µ—Ç –∑–∞–¥–∞—á–∏</b>\n\n"
        "–£–∫–∞–∂–∏—Ç–µ –±—é–¥–∂–µ—Ç –≤ —Ä—É–±–ª—è—Ö (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):\n\n"
        "üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
        "‚Ä¢ 5000\n"
        "‚Ä¢ 15000\n"
        "‚Ä¢ 50000\n\n"
        "üîô –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel",
        parse_mode="HTML"
    )


@router.message(CreateTaskStates.waiting_for_budget)
async def process_task_budget(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—é–¥–∂–µ—Ç–∞ –∑–∞–¥–∞—á–∏"""
    try:
        budget = int(message.text)
        if budget < 100:
            await message.answer(
                "‚ùå –ë—é–¥–∂–µ—Ç —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π! –ú–∏–Ω–∏–º—É–º 100 ‚ÇΩ.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return
        if budget > 1000000:
            await message.answer(
                "‚ùå –ë—é–¥–∂–µ—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º—É–º 1,000,000 ‚ÇΩ.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return
    except ValueError:
        await message.answer(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ! –ù–∞–ø—Ä–∏–º–µ—Ä: 5000\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    await state.update_data(budget=budget)
    await state.set_state(CreateTaskStates.waiting_for_confirmation)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    data = await state.get_data()
    
    confirmation_text = (
        "‚úÖ <b>–í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!</b>\n\n"
        "üìã <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:</b>\n\n"
        f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['title']}\n"
        f"üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description'][:100]}...\n"
        f"üî¥ <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {data['priority']}\n"
        f"üìÖ <b>–°—Ä–æ–∫:</b> {data['deadline'].strftime('%d.%m.%Y')}\n"
        f"üí∞ <b>–ë—é–¥–∂–µ—Ç:</b> {data['budget']:,} ‚ÇΩ\n\n"
        "üîç <b>–í—Å–µ –≤–µ—Ä–Ω–æ?</b>\n"
        "–ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏–ª–∏ '–û—Ç–º–µ–Ω–∏—Ç—å' –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è."
    )
    
    await message.answer(
        confirmation_text,
        reply_markup=get_task_confirmation_keyboard(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "confirm_task_creation")
async def confirm_task_creation(callback: types.CallbackQuery, state: FSMContext, user: User):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    try:
        data = await state.get_data()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        task_service = TaskService()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        task_data = {
            'title': data['title'],
            'description': data['description'],
            'priority': data['priority'],
            'deadline': data['deadline'],
            'budget': data['budget'],
            'status': TaskStatus.TODO
        }
        
        task = await task_service.create_task(task_data, user.id)
        
        await state.clear()
        
        success_text = (
            "üéâ <b>–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
            f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {task.title}\n"
            f"üí∞ <b>–ë—é–¥–∂–µ—Ç:</b> {task.budget:,} ‚ÇΩ\n"
            f"üìÖ <b>–°—Ä–æ–∫:</b> {task.deadline.strftime('%d.%m.%Y')}\n\n"
            "‚úÖ <b>–ß—Ç–æ –¥–∞–ª—å—à–µ:</b>\n"
            "‚Ä¢ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫\n"
            "‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
            "‚Ä¢ –ù–∞–∑–Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π\n\n"
            "üîç <b>–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏:</b> /tasks"
        )
        
        await callback.message.edit_text(
            success_text,
            reply_markup=get_main_menu_keyboard(
                user_role=user.role,
                is_admin=user.role == UserRole.ADMIN,
                is_linked=True
            ),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error creating task: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏!</b>\n\n"
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=get_main_menu_keyboard(
                user_role=user.role,
                is_admin=user.role == UserRole.ADMIN,
                is_linked=True
            ),
            parse_mode="HTML"
        )
    
    await callback.answer()


@router.callback_query(F.data == "cancel_task_creation")
async def cancel_task_creation(callback: types.CallbackQuery, state: FSMContext, user: User):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    await state.clear()
    
    await callback.message.edit_text(
        "‚ùå <b>–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –ø–æ–∑–∂–µ, –Ω–∞–∂–∞–≤ 'üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.",
        reply_markup=get_main_menu_keyboard(
            user_role=user.role,
            is_admin=user.role == UserRole.ADMIN,
            is_linked=True
        ),
        parse_mode="HTML"
    )
    await callback.answer()


@router.message(Command("cancel"))
async def cancel_creation_command(message: types.Message, state: FSMContext, user: User):
    """–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è"""
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("‚ùå –ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å!")
        return
    
    await state.clear()
    
    await message.answer(
        "‚ùå <b>–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –ø–æ–∑–∂–µ, –Ω–∞–∂–∞–≤ 'üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.",
        reply_markup=get_main_menu_keyboard(
            user_role=user.role,
            is_admin=user.role == UserRole.ADMIN,
            is_linked=True
        ),
        parse_mode="HTML"
    )
