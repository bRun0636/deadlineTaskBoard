import logging
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from ..keyboards.auth_keyboards import get_auth_keyboard
from ..services.user_service import UserService

router = Router(name="auth_router")
logger = logging.getLogger(__name__)


class RegistrationStates(StatesGroup):
    waiting_for_email = State()
    waiting_for_password = State()


@router.callback_query(F.data == "auth")
async def auth_handler(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    """
    user_service = UserService()
    user = await user_service.get_user_by_telegram_id(callback.from_user.id)
    
    try:
        if user and user.is_registered:
            await callback.message.edit_text(
                f"‚úÖ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!\n\n"
                f"–ò–º—è: {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"Email: {user.email or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"–†–æ–ª—å: {user.role or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}",
                reply_markup=get_auth_keyboard()
            )
        else:
            await callback.message.edit_text(
                "üîê <b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</b>\n\n"
                "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç–µ.\n\n"
                "üåê <a href='http://localhost:3000/register'>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</a>\n"
                "üîó <a href='http://localhost:3000/login'>–í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç</a>",
                reply_markup=get_auth_keyboard(),
                parse_mode="HTML",
                disable_web_page_preview=True
            )
    except Exception as e:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        logger.debug(f"Message edit failed (likely unchanged): {e}")
    
    await callback.answer()


@router.callback_query(F.data == "link_account")
async def link_account_handler(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
    """
    try:
        await callback.message.edit_text(
            "üîó <b>–ü—Ä–∏–≤—è–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞</b>\n\n"
            "–î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ Telegram –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É:\n\n"
            "1. –í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ —Å–∞–π—Ç–µ\n"
            "2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è\n"
            "3. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à Telegram ID: <code>{}</code>\n\n"
            "üåê <a href='http://localhost:3000/profile'>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è</a>".format(
                callback.from_user.id
            ),
            reply_markup=get_auth_keyboard(),
            parse_mode="HTML",
            disable_web_page_preview=True
        )
    except Exception as e:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        logger.debug(f"Message edit failed (likely unchanged): {e}")
    
    await callback.answer()


@router.message(Command("profile"))
async def profile_handler(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile
    """
    user_service = UserService()
    user = await user_service.get_user_by_telegram_id(message.from_user.id)
    
    if user and user.is_registered:
        profile_text = (
            f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n\n"
            f"–ò–º—è: {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"Email: {user.email or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"–†–æ–ª—å: {user.role or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            f"Telegram ID: {user.telegram_id}\n\n"
            f"üåê <a href='http://localhost:3000/profile'>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å</a>"
        )
        await message.answer(profile_text, parse_mode="HTML", disable_web_page_preview=True)
    else:
        await message.answer(
            "‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.\n\n"
            "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç–µ.\n"
            "üåê <a href='http://localhost:3000/register'>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</a>",
            parse_mode="HTML",
            disable_web_page_preview=True
        ) 