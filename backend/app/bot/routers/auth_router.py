import logging
import httpx
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from ..keyboards.auth_keyboards import get_auth_keyboard
from ..services.user_service import UserService
from app.config import settings

router = Router(name="auth_router")
logger = logging.getLogger(__name__)


class RegistrationStates(StatesGroup):
    waiting_for_email = State()
    waiting_for_password = State()


class BindingStates(StatesGroup):
    waiting_for_code = State()


@router.callback_query(F.data == "auth")
async def auth_handler(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    """
    user_service = UserService()
    user = await user_service.get_or_create_user(
        telegram_id=callback.from_user.id,
        username=callback.from_user.username or f"user_{callback.from_user.id}",
        first_name=callback.from_user.first_name,
        last_name=callback.from_user.last_name
    )
    
    try:
        if user and user.is_registered:
            await callback.message.edit_text(
                f"‚úÖ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!\n\n"
                f"–ò–º—è: {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"Email: {user.email or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"–†–æ–ª—å: {user.role or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}",
                reply_markup=get_auth_keyboard()
            )
        else:
            await callback.message.edit_text(
                "üîê <b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</b>\n\n"
                "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç–µ.\n\n"
                "üåê <a href='http://localhost:3000/register'>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</a>\n"
                "üîó <a href='http://localhost:3000/login'>–í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç</a>",
                reply_markup=get_auth_keyboard(),
                parse_mode="HTML",
                disable_web_page_preview=True
            )
    except Exception as e:
        # Debug logging removed for production
        pass
    
    await callback.answer()


@router.callback_query(F.data == "link_account")
async def link_account_handler(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
    """
    try:
        await callback.message.edit_text(
            "üîó <b>–ü—Ä–∏–≤—è–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞</b>\n\n"
            "–î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ Telegram –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É:\n\n"
            "1. –í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ —Å–∞–π—Ç–µ\n"
            "2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è\n"
            "3. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∫–æ–¥ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏\n"
            "4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –º–Ω–µ\n\n"
            "üåê <a href='http://localhost:3000/profile'>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è</a>\n\n"
            "üìù <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –ø—Ä–∏–≤—è–∑–∫–∏:</b>",
            reply_markup=get_auth_keyboard(),
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞
        await state.set_state(BindingStates.waiting_for_code)
        
    except Exception as e:
        # Debug logging removed for production
        pass
    
    await callback.answer()


@router.message(BindingStates.waiting_for_code)
async def handle_binding_code(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–¥–∞ –ø—Ä–∏–≤—è–∑–∫–∏
    """
    code = message.text.strip()
    
    if not code or len(code) != 8:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞.\n\n"
            "–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 8 —Å–∏–º–≤–æ–ª–æ–≤ (–±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã).\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –Ω–∞ —Å–∞–π—Ç–µ."
        )
        return
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
        url = f"{settings.api_base_url}/api/v1/telegram/bind/{code}"
        data = {
            "telegram_id": message.from_user.id,
            "telegram_username": message.from_user.username or f"user_{message.from_user.id}"
        }
        
        logger.info(f"Attempting to bind account with URL: {url}")
        logger.info(f"Data: {data}")
        
        async with httpx.AsyncClient() as client:
            response = await client.post(
                url,
                json=data,
                timeout=10.0
            )
            
            if response.status_code == 200:
                data = response.json()
                await message.answer(
                    "‚úÖ <b>–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!</b>\n\n"
                    f"–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ —Å–∞–π—Ç–µ —Ç–µ–ø–µ—Ä—å —Å–≤—è–∑–∞–Ω —Å Telegram.\n"
                    f"–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö –∏ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.\n\n"
                    "üè† <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏</b>",
                    parse_mode="HTML"
                )
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await state.clear()
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                from ..keyboards.main_keyboards import get_main_menu_keyboard
                await message.answer(
                    "üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Deadline Task Board!</b>\n\n"
                    "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                    "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã –∏ –∑–∞–¥–∞—á–∏\n"
                    "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã\n"
                    "‚Ä¢ –û–±—â–∞—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏\n"
                    "‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=get_main_menu_keyboard(is_admin=False, is_linked=True),
                    parse_mode="HTML"
                )
                
            elif response.status_code == 400:
                error_data = response.json()
                error_message = error_data.get("detail", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                
                if "–∏—Å—Ç–µ–∫" in error_message.lower():
                    await message.answer(
                        "‚ùå <b>–ö–æ–¥ –ø—Ä–∏–≤—è–∑–∫–∏ –∏—Å—Ç–µ–∫</b>\n\n"
                        "–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω —Ç–æ–ª—å–∫–æ 10 –º–∏–Ω—É—Ç.\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –Ω–∞ —Å–∞–π—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n\n"
                        "üåê <a href='http://localhost:3000/profile'>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥</a>",
                        parse_mode="HTML",
                        disable_web_page_preview=True
                    )
                elif "—É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω" in error_message.lower():
                    await message.answer(
                        "‚ùå <b>–≠—Ç–æ—Ç Telegram –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω</b>\n\n"
                        "–î–∞–Ω–Ω—ã–π Telegram –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ —Å–≤—è–∑–∞–Ω —Å –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.\n"
                        "–ï—Å–ª–∏ —ç—Ç–æ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                        parse_mode="HTML"
                    )
                else:
                    await message.answer(
                        f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏:</b> {error_message}\n\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                        parse_mode="HTML"
                    )
                    
            elif response.status_code == 404:
                await message.answer(
                    "‚ùå <b>–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥</b>\n\n"
                    "–ö–æ–¥ –ø—Ä–∏–≤—è–∑–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –Ω–∞ —Å–∞–π—Ç–µ.\n\n"
                    "üåê <a href='http://localhost:3000/profile'>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥</a>",
                    parse_mode="HTML",
                    disable_web_page_preview=True
                )
                
            else:
                await message.answer(
                    "‚ùå <b>–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞</b>\n\n"
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                )
                
    except httpx.TimeoutException:
        await message.answer(
            "‚ùå <b>–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è</b>\n\n"
            "–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    except Exception as e:
        logger.error(f"Error binding account: {e}")
        await message.answer(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )


@router.message(Command("profile"))
async def profile_handler(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile
    """
    user_service = UserService()
    user = await user_service.get_or_create_user(
        telegram_id=message.from_user.id,
        username=message.from_user.username or f"user_{message.from_user.id}",
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )
    
    if user and user.is_registered:
        profile_text = (
            f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n\n"
            f"–ò–º—è: {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"Email: {user.email or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"–†–æ–ª—å: {user.role or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            f"Telegram ID: {user.telegram_id}\n\n"
            f"üåê <a href='http://localhost:3000/profile'>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å</a>"
        )
        await message.answer(profile_text, parse_mode="HTML", disable_web_page_preview=True)
    else:
        await message.answer(
            "‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.\n\n"
            "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç–µ.\n"
            "üåê <a href='http://localhost:3000/register'>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</a>",
            parse_mode="HTML",
            disable_web_page_preview=True
        ) 