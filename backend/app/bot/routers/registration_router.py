import logging
import json
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command

from ..states.registration_states import Registration
from ..keyboards.registration_keyboards import (
    get_phone_keyboard, get_role_keyboard, get_country_keyboard,
    get_juridical_type_keyboard, get_payment_types_keyboard,
    get_prof_level_keyboard, get_notification_types_keyboard
)
from ..services.user_service import UserService
from app.models.user import UserRole, JuridicalType, PaymentType, NotificationType, User

router = Router(name="registration_router")
logger = logging.getLogger(__name__)

@router.message(Command("register"))
async def start_registration(message: types.Message, state: FSMContext, user: User):
    """–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"""
    if user and user.is_registered:
        await message.answer("‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        return
    
    await state.set_state(Registration.phone)
    await message.answer(
        "üîê <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ Deadline Task Board</b>\n\n"
        "üì± <b>–®–∞–≥ 1: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
        "üí° <b>–ó–∞—á–µ–º –Ω—É–∂–µ–Ω –Ω–æ–º–µ—Ä:</b>\n"
        "‚Ä¢ –î–ª—è —Å–≤—è–∑–∏ —Å –∑–∞–∫–∞–∑—á–∏–∫–∞–º–∏\n"
        "‚Ä¢ –î–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–ª–∞—Ç–µ–∂–∞—Ö\n"
        "‚Ä¢ –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç–∞\n\n"
        "üîí <b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã –∏ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º</b>",
        reply_markup=get_phone_keyboard(),
        parse_mode="HTML"
    )

@router.message(Registration.phone, F.contact)
async def get_phone_handler(message: types.Message, state: FSMContext, user: User):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    phone = message.contact.phone_number
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await state.update_data(phone=phone)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏
    await state.set_state(Registration.role)
    await message.answer(
        "‚úÖ <b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—É—á–µ–Ω!</b>\n\n"
        "üë§ <b>–®–∞–≥ 2: –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å</b>\n\n"
        "üí° <b>–ó–∞–∫–∞–∑—á–∏–∫:</b>\n"
        "‚Ä¢ –†–∞–∑–º–µ—â–∞–µ—Ç–µ –∑–∞–∫–∞–∑—ã –∏ –∑–∞–¥–∞—á–∏\n"
        "‚Ä¢ –í—ã–±–∏—Ä–∞–µ—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π\n"
        "‚Ä¢ –û–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É\n\n"
        "üí° <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b>\n"
        "‚Ä¢ –í—ã–ø–æ–ª–Ω—è–µ—Ç–µ –∑–∞–∫–∞–∑—ã –∏ –∑–∞–¥–∞—á–∏\n"
        "‚Ä¢ –ü–æ–ª—É—á–∞–µ—Ç–µ –æ–ø–ª–∞—Ç—É –∑–∞ —Ä–∞–±–æ—Ç—É\n"
        "‚Ä¢ –†–∞–∑–≤–∏–≤–∞–µ—Ç–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ\n\n"
        "üîÑ <b>–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–∑–∂–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö</b>",
        reply_markup=get_role_keyboard(),
        parse_mode="HTML"
    )

@router.message(Registration.phone)
async def handle_invalid_phone(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    await message.answer(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞."
    )

@router.callback_query(Registration.role, F.data.startswith("role_"))
async def get_role_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏"""
    role = callback.data.split("_")[1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ–ª—å
    await state.update_data(role=role)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å—Ç—Ä–∞–Ω—ã
    await state.set_state(Registration.country)
    try:
        await callback.message.edit_text(
            "‚úÖ <b>–†–æ–ª—å –≤—ã–±—Ä–∞–Ω–∞!</b>\n\n"
            "üåç <b>–®–∞–≥ 3: –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Å—Ç—Ä–∞–Ω—É</b>\n\n"
            "üí° <b>–ó–∞—á–µ–º –Ω—É–∂–Ω–∞ —Å—Ç—Ä–∞–Ω–∞:</b>\n"
            "‚Ä¢ –î–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–ª–æ–≥–æ–≤\n"
            "‚Ä¢ –î–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã\n"
            "‚Ä¢ –î–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π\n"
            "‚Ä¢ –î–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É\n\n"
            "üåê <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É, –≥–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –∏–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ</b>",
            reply_markup=get_country_keyboard(),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.debug(f"Message edit failed: {e}")
    
    await callback.answer()

@router.callback_query(Registration.country, F.data.startswith("country_"))
async def get_country_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã"""
    country = callback.data.split("_")[1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–∞–Ω—É
    await state.update_data(country=country)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    await state.set_state(Registration.juridical_type)
    try:
        await callback.message.edit_text(
            "‚úÖ <b>–°—Ç—Ä–∞–Ω–∞ –≤—ã–±—Ä–∞–Ω–∞!</b>\n\n"
            "üíº <b>–®–∞–≥ 4: –í—ã–±–µ—Ä–∏—Ç–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å</b>\n\n"
            "üí° <b>–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ:</b>\n"
            "‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç–µ –∫–∞–∫ —á–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ\n"
            "‚Ä¢ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤\n"
            "‚Ä¢ –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n\n"
            "üí° <b>–û–û–û:</b>\n"
            "‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç–µ —á–µ—Ä–µ–∑ –∫–æ–º–ø–∞–Ω–∏—é\n"
            "‚Ä¢ –ù—É–∂–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç—ã –û–û–û\n"
            "‚Ä¢ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –±–∏–∑–Ω–µ—Å–∞\n\n"
            "üí° <b>–ò–ü:</b>\n"
            "‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å\n"
            "‚Ä¢ –ù—É–∂–Ω–æ —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ –ò–ü\n"
            "‚Ä¢ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å–∞–º–æ–∑–∞–Ω—è—Ç—ã—Ö\n\n"
            "üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å, —Å –∫–æ—Ç–æ—Ä—ã–º –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ</b>",
            reply_markup=get_juridical_type_keyboard(),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.debug(f"Message edit failed: {e}")
    
    await callback.answer()

@router.callback_query(Registration.juridical_type, F.data.startswith("juridical_"))
async def get_juridical_type_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞"""
    juridical_type = callback.data.split("_")[1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å
    await state.update_data(juridical_type=juridical_type)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–æ–≤ –æ–ø–ª–∞—Ç—ã
    await state.set_state(Registration.payment_types)
    try:
        await callback.message.edit_text(
            "‚úÖ <b>–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å –≤—ã–±—Ä–∞–Ω!</b>\n\n"
            "üí≥ <b>–®–∞–≥ 5: –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã</b>\n\n"
            "üí° <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ —Å–ø–æ—Å–æ–±—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –ø–æ–¥—Ö–æ–¥—è—Ç:</b>\n"
            "‚Ä¢ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞ - –±—ã—Å—Ç—Ä–æ –∏ —É–¥–æ–±–Ω–æ\n"
            "‚Ä¢ –ù–∞–ª–∏—á–Ω—ã–µ - –¥–ª—è –ª–∏—á–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á\n"
            "‚Ä¢ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ - –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö —Å—É–º–º\n"
            "‚Ä¢ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ - –∞–Ω–æ–Ω–∏–º–Ω–æ –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ\n\n"
            "üí∞ <b>–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤</b>\n"
            "üîÑ <b>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–ø–æ—Å–æ–±, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å</b>",
            reply_markup=get_payment_types_keyboard(),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.debug(f"Message edit failed: {e}")
    
    await callback.answer()

@router.callback_query(Registration.payment_types, F.data.startswith("payment_toggle_"))
async def toggle_payment_type_handler(callback: types.CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –æ–ø–ª–∞—Ç—ã"""
    payment_type = callback.data.split("_")[2]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã
    data = await state.get_data()
    selected_types = data.get("payment_types", [])
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ç–∏–ø
    if payment_type in selected_types:
        selected_types.remove(payment_type)
    else:
        selected_types.append(payment_type)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    await state.update_data(payment_types=selected_types)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    try:
        await callback.message.edit_reply_markup(
            reply_markup=get_payment_types_keyboard(selected_types)
        )
    except Exception as e:
        logger.debug(f"Message edit failed (likely unchanged): {e}")
    
    await callback.answer()

@router.callback_query(Registration.payment_types, F.data == "payment_done")
async def payment_types_done_handler(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–æ–≤ –æ–ø–ª–∞—Ç—ã"""
    data = await state.get_data()
    payment_types = data.get("payment_types", [])
    
    if not payment_types:
        await callback.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø –æ–ø–ª–∞—Ç—ã!", show_alert=True)
        return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —É—Ä–æ–≤–Ω—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º–∞
    await state.set_state(Registration.prof_level)
    try:
        await callback.message.edit_text(
            "‚úÖ <b>–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã –≤—ã–±—Ä–∞–Ω—ã!</b>\n\n"
            "üéØ <b>–®–∞–≥ 6: –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º–∞</b>\n\n"
            "üí° <b>–£—Ä–æ–≤–Ω–∏:</b>\n"
            "üü¢ <b>Junior</b> - –Ω–∞—á–∏–Ω–∞—é—â–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç (0-1 –≥–æ–¥ –æ–ø—ã—Ç–∞)\n"
            "üü° <b>Middle</b> - –æ–ø—ã—Ç–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç (1-3 –≥–æ–¥–∞ –æ–ø—ã—Ç–∞)\n"
            "üü† <b>Senior</b> - —Å—Ç–∞—Ä—à–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç (3+ –ª–µ—Ç –æ–ø—ã—Ç–∞)\n"
            "üî¥ <b>Expert</b> - —ç–∫—Å–ø–µ—Ä—Ç –≤ —Å–≤–æ–µ–π –æ–±–ª–∞—Å—Ç–∏ (5+ –ª–µ—Ç –æ–ø—ã—Ç–∞)\n\n"
            "üìä <b>–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞–º –æ—Ü–µ–Ω–∏—Ç—å –≤–∞—à –æ–ø—ã—Ç</b>\n"
            "üîÑ <b>–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –≤ –ø—Ä–æ—Ñ–∏–ª–µ</b>",
            reply_markup=get_prof_level_keyboard(),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.debug(f"Message edit failed: {e}")
    
    await callback.answer()

@router.callback_query(Registration.prof_level, F.data.startswith("prof_level_"))
async def get_prof_level_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º–∞"""
    prof_level = callback.data.split("_")[2]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º–∞
    await state.update_data(prof_level=prof_level)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –Ω–∞–≤—ã–∫–æ–≤
    await state.set_state(Registration.skills)
    try:
        await callback.message.edit_text(
            "‚úÖ <b>–£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º–∞ –≤—ã–±—Ä–∞–Ω!</b>\n\n"
            "üí™ <b>–®–∞–≥ 7: –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –Ω–∞–≤—ã–∫–∏</b>\n\n"
            "üí° <b>–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–≤—ã–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:</b>\n"
            "‚Ä¢ –Ø–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è (Python, JavaScript, Java)\n"
            "‚Ä¢ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ (React, Django, Docker)\n"
            "‚Ä¢ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (Photoshop, Figma, Excel)\n"
            "‚Ä¢ –Ø–∑—ã–∫–∏ (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –∏—Å–ø–∞–Ω—Å–∫–∏–π)\n"
            "‚Ä¢ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (SEO, SMM, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞)\n\n"
            "üìù <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
            "‚Ä¢ –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞, JavaScript, React, Node.js\n"
            "‚Ä¢ –î–∏–∑–∞–π–Ω, Photoshop, Figma, UI/UX\n"
            "‚Ä¢ –ö–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥, SEO, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥, SMM\n\n"
            "üéØ <b>–£–∫–∞–∂–∏—Ç–µ –Ω–∞–≤—ã–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —É –≤–∞—Å –µ—Å—Ç—å</b>"
        )
    except Exception as e:
        logger.debug(f"Message edit failed: {e}")
    
    await callback.answer()

@router.message(Registration.skills)
async def get_skills_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–≤—ã–∫–æ–≤"""
    skills_text = message.text.strip()
    skills_list = [skill.strip() for skill in skills_text.split(",") if skill.strip()]
    
    if not skills_list:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –Ω–∞–≤—ã–∫.\n\n"
            "üí° <b>–ü—Ä–∏–º–µ—Ä—ã –Ω–∞–≤—ã–∫–æ–≤:</b>\n"
            "‚Ä¢ –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞, JavaScript, React\n"
            "‚Ä¢ –î–∏–∑–∞–π–Ω, Photoshop, Figma\n"
            "‚Ä¢ –ö–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥, SEO, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥\n"
            "‚Ä¢ –ú–æ–±–∏–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞, iOS, Android\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö, Python, SQL",
            parse_mode="HTML"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–≤—ã–∫–∏
    await state.update_data(skills=skills_list)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –±–∏–æ–≥—Ä–∞—Ñ–∏–∏
    await state.set_state(Registration.bio)
    await message.answer(
        "üí™ –ù–∞–≤—ã–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n"
        "üìù <b>–¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ (–±–∏–æ–≥—Ä–∞—Ñ–∏—è):</b>\n\n"
        "üí° <b>–ß—Ç–æ –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å:</b>\n"
        "‚Ä¢ –í–∞—à –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã\n"
        "‚Ä¢ –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã\n"
        "‚Ä¢ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –ø—Ä–æ–µ–∫—Ç—ã\n"
        "‚Ä¢ –ü–æ—á–µ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —ç—Ç–æ–π —Å—Ñ–µ—Ä–µ\n"
        "‚Ä¢ –í–∞—à–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã\n\n"
        "üìù <b>–ü—Ä–∏–º–µ—Ä:</b>\n"
        "¬´–Ø –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —Å 3-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º. –°–æ–∑–¥–∞–ª –±–æ–ª–µ–µ 20 —Å–∞–π—Ç–æ–≤ –¥–ª—è –º–∞–ª–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞. "
        "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ React –∏ Node.js. –õ—é–±–ª—é —Å–æ–∑–¥–∞–≤–∞—Ç—å —É–¥–æ–±–Ω—ã–µ –∏ –∫—Ä–∞—Å–∏–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã.¬ª",
        parse_mode="HTML"
    )

@router.message(Registration.bio)
async def get_bio_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –±–∏–æ–≥—Ä–∞—Ñ–∏–∏"""
    bio = message.text.strip()
    
    if len(bio) < 10:
        await message.answer(
            "‚ùå –ë–∏–æ–≥—Ä–∞—Ñ–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
            "üí° <b>–°–æ–≤–µ—Ç:</b> –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö –∏–ª–∏ —Ü–µ–ª—è—Ö. "
            "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞–º –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –≤–∞—à–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.",
            parse_mode="HTML"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∏–æ–≥—Ä–∞—Ñ–∏—é
    await state.update_data(bio=bio)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    await state.set_state(Registration.notifications)
    await message.answer(
        "üìù –ë–∏–æ–≥—Ä–∞—Ñ–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n"
        "üîî <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</b>\n\n"
        "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤—ã–±—Ä–∞—Ç—å –≤—Å–µ —Ç–∏–ø—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n"
        "‚Ä¢ –ù–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ - —É–∑–Ω–∞–µ—Ç–µ –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö\n"
        "‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á - –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –≤–∞—à–∏—Ö –∑–∞–¥–∞—á–∞—Ö\n"
        "‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è - –ø–µ—Ä–µ–ø–∏—Å–∫–∞ —Å –∑–∞–∫–∞–∑—á–∏–∫–∞–º–∏\n"
        "‚Ä¢ –ü–ª–∞—Ç–µ–∂–∏ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–ø–ª–∞—Ç–∞—Ö\n"
        "‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ã–µ - –≤–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç —Å–∏—Å—Ç–µ–º—ã",
        reply_markup=get_notification_types_keyboard(),
        parse_mode="HTML"
    )

@router.callback_query(Registration.notifications, F.data.startswith("notification_toggle_"))
async def toggle_notification_handler(callback: types.CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ callback_data
    # callback_data –∏–º–µ–µ—Ç –≤–∏–¥ "notification_toggle_new_tasks"
    notification_type = callback.data.replace("notification_toggle_", "")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã
    data = await state.get_data()
    selected_types = data.get("notification_types", [])
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ç–∏–ø
    if notification_type in selected_types:
        selected_types.remove(notification_type)
    else:
        selected_types.append(notification_type)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    await state.update_data(notification_types=selected_types)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    try:
        await callback.message.edit_reply_markup(
            reply_markup=get_notification_types_keyboard(selected_types)
        )
    except Exception as e:
        logger.debug(f"Message edit failed (likely unchanged): {e}")
    
    await callback.answer()

@router.callback_query(Registration.notifications, F.data == "registration_complete")
async def complete_registration_handler(callback: types.CallbackQuery, state: FSMContext, user: User):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        data = await state.get_data()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user_service = UserService()
        await user_service.complete_registration(
            telegram_id=callback.from_user.id,
            registration_data=data
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        try:
            await callback.message.edit_text(
                "üéâ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Deadline Task Board!\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.",
                parse_mode="HTML"
            )
        except Exception as e:
            logger.debug(f"Message edit failed: {e}")
        
        logger.info(f"User {callback.from_user.id} completed registration")
        
    except Exception as e:
        logger.error(f"Error completing registration for user {callback.from_user.id}: {e}")
        try:
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        except Exception as edit_error:
            logger.debug(f"Message edit failed: {edit_error}")
    
    await callback.answer() 