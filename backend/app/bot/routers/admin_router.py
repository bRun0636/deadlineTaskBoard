import logging
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from ..keyboards.admin_keyboards import get_admin_keyboard
from ..services.admin_service import AdminService
from ..services.user_service import UserService
from app.models.user import UserRole

router = Router(name="admin_router")
logger = logging.getLogger(__name__)


@router.callback_query(F.data == "admin")
async def admin_menu_handler(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –º–µ–Ω—é
    """
    user_service = UserService()
    user = await user_service.get_user_by_telegram_id(callback.from_user.id)
    
    if not user or not user.is_registered or user.role != UserRole.ADMIN.value:
        await callback.message.edit_text(
            "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.\n\n"
            "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.",
            reply_markup=get_admin_keyboard()
        )
        await callback.answer()
        return
    
    await callback.message.edit_text(
        "üîß <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "admin_users")
async def admin_users_handler(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∞–¥–º–∏–Ω)
    """
    user_service = UserService()
    admin_service = AdminService()
    
    user = await user_service.get_user_by_telegram_id(callback.from_user.id)
    
    if not user or not user.is_registered or user.role != UserRole.ADMIN.value:
        await callback.message.edit_text(
            "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.\n\n"
            "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.",
            reply_markup=get_admin_keyboard()
        )
        await callback.answer()
        return
    
    users = await admin_service.get_all_users()
    
    users_text = "üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b>\n\n"
    for i, u in enumerate(users[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_text += (
            f"{i}. üë§ <b>{u.first_name or u.username or '–ë–µ–∑ –∏–º–µ–Ω–∏'}</b>\n"
            f"   Email: {u.email or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"   –†–æ–ª—å: {u.role or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            f"   –°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if u.is_active else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n\n"
        )
    
    if len(users) > 10:
        users_text += f"... –∏ –µ—â–µ {len(users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
    
    users_text += "üåê <a href='http://localhost:3000/admin'>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –Ω–∞ —Å–∞–π—Ç–µ</a>"
    
    await callback.message.edit_text(
        users_text,
        reply_markup=get_admin_keyboard(),
        parse_mode="HTML",
        disable_web_page_preview=True
    )
    await callback.answer()


@router.callback_query(F.data == "admin_stats")
async def admin_stats_handler(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–∞–¥–º–∏–Ω)
    """
    user_service = UserService()
    admin_service = AdminService()
    
    user = await user_service.get_user_by_telegram_id(callback.from_user.id)
    
    if not user or not user.is_registered or user.role != UserRole.ADMIN.value:
        await callback.message.edit_text(
            "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.\n\n"
            "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.",
            reply_markup=get_admin_keyboard()
        )
        await callback.answer()
        return
    
    stats = await admin_service.get_system_statistics()
    
    stats_text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('active_users', 0)}\n"
        f"–ó–∞–¥–∞—á: {stats.get('total_tasks', 0)}\n"
        f"–ó–∞–∫–∞–∑–æ–≤: {stats.get('total_orders', 0)}\n"
        f"–°–æ–æ–±—â–µ–Ω–∏–π: {stats.get('total_messages', 0)}\n"
        f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {stats.get('total_proposals', 0)}\n\n"
        f"üåê <a href='http://localhost:3000/admin'>–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ —Å–∞–π—Ç–µ</a>"
    )
    
    await callback.message.edit_text(
        stats_text,
        reply_markup=get_admin_keyboard(),
        parse_mode="HTML",
        disable_web_page_preview=True
    )
    await callback.answer()


@router.message(Command("admin"))
async def admin_command_handler(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
    """
    user_service = UserService()
    user = await user_service.get_user_by_telegram_id(message.from_user.id)
    
    if not user or not user.is_registered or user.role != 'admin':
        await message.answer(
            "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.\n\n"
            "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º."
        )
        return
    
    await message.answer(
        "üîß <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/admin_users - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "/admin_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n"
        "/admin_orders - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏\n\n"
        "üåê <a href='http://localhost:3000/admin'>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –Ω–∞ —Å–∞–π—Ç–µ</a>",
        parse_mode="HTML",
        disable_web_page_preview=True
    )


@router.message(Command("admin_users"))
async def admin_users_command_handler(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin_users
    """
    user_service = UserService()
    admin_service = AdminService()
    
    user = await user_service.get_user_by_telegram_id(message.from_user.id)
    
    if not user or not user.is_registered or user.role != 'admin':
        await message.answer(
            "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.\n\n"
            "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º."
        )
        return
    
    users = await admin_service.get_all_users()
    
    users_text = "üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b>\n\n"
    for i, u in enumerate(users[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_text += (
            f"{i}. üë§ <b>{u.first_name or u.username or '–ë–µ–∑ –∏–º–µ–Ω–∏'}</b>\n"
            f"   Email: {u.email or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"   –†–æ–ª—å: {u.role or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n\n"
        )
    
    if len(users) > 5:
        users_text += f"... –∏ –µ—â–µ {len(users) - 5} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
    
    users_text += "üåê <a href='http://localhost:3000/admin'>–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞ —Å–∞–π—Ç–µ</a>"
    
    await message.answer(
        users_text,
        parse_mode="HTML",
        disable_web_page_preview=True
    ) 